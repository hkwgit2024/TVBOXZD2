name: Node Proxy Test # 工作流的名称

on:
  push:
    branches:
      - main # 当推送到 main 分支时触发
  pull_request:
    branches:
      - main # 当有针对 main 分支的 Pull Request 时触发
  workflow_dispatch: # 允许通过 GitHub UI 手动触发工作流

jobs:
  test-proxies:
    runs-on: ubuntu-latest # 使用最新版 Ubuntu 运行
    defaults: # 设置默认配置
      run: # 为所有 run 命令设置默认 shell
        shell: bash # 使用 bash shell，等效于 /usr/bin/bash -e

    steps:
      - name: 检出仓库代码 # 步骤 1：克隆代码仓库
        uses: actions/checkout@v4

      - name: 设置 Node.js 环境 # 步骤 2：配置 Node.js 环境
        uses: actions/setup-node@v4
        with:
          node-version: '20' # 使用 Node.js 20 版本

      - name: 缓存 Node 模块 # 步骤 3：缓存 npm 依赖，加速构建
        uses: actions/cache@v4
        with:
          path: ~/.npm # 缓存 npm 包路径
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }} # 缓存键
          restore-keys: |
            ${{ runner.os }}-node- # 恢复缓存键

      - name: 安装依赖 # 步骤 4：安装 package.json 中的依赖
        run: npm ci # 使用 npm ci 确保一致性安装

      - name: 创建必要目录 # 步骤 5：确保所需目录存在
        run: |
          mkdir -p tools # 用于存放 Clash 可执行文件
          mkdir -p data  # 用于存放 520.yaml 和 521.yaml
          mkdir -p temp  # 用于存放临时配置文件

      - name: 下载并验证 Clash 核心 # 步骤 6：动态获取并下载最新 Clash/mihomo 版本
        run: |
          # 安装 zstd 以支持可能的 .zst 文件
          sudo apt-get update && sudo apt-get install -y zstd
          
          # 从 GitHub API 获取最新 mihomo 版本号
          CLASH_VERSION=$(curl -s https://api.github.com/repos/MetaCubeX/mihomo/releases/latest | grep -oE '"tag_name":"[^"]+"' | cut -d'"' -f4 | sed 's/^v//')
          if [ -z "$CLASH_VERSION" ]; then
            echo "::warning::无法获取 MetaCubeX/mihomo 最新版本，回退到 v1.18.2"
            CLASH_VERSION="v1.18.2"
          fi
          
          # 尝试多种可能的文件名
          CLASH_URLS=(
            "https://github.com/MetaCubeX/mihomo/releases/download/v${CLASH_VERSION}/mihomo-linux-amd64-v${CLASH_VERSION}.gz"
            "https://github.com/WindSpiritSR/clash/releases/download/v${CLASH_VERSION}/clash-linux-amd64-v3-v${CLASH_VERSION}.gz"
          )
          
          DOWNLOADED=false
          for URL in "${CLASH_URLS[@]}"; do
            echo "尝试从 URL 下载: ${URL}"
            wget -v "${URL}" -O clash.gz && {
              DOWNLOADED=true
              break
            }
            echo "::warning::下载失败: ${URL}"
          done
          
          if [ "$DOWNLOADED" != "true" ]; then
            echo "::error::所有 URL 下载均失败。退出。"
            exit 1
          fi
          
          echo "已下载 clash.gz。文件大小:"
          ls -lh clash.gz
          echo "检查文件类型:"
          file clash.gz
          
          echo "尝试解压 clash.gz..."
          if [[ "$(file clash.gz)" == *"gzip compressed"* ]]; then
            gzip -d clash.gz
            if [ $? -ne 0 ]; then
              echo "::error::gzip 解压失败。退出。"
              exit 1
            fi
            mv clash mihomo
          elif [[ "$(file clash.gz)" == *"Zstandard compressed"* ]]; then
            zstd -d clash.gz -o clash.tar
            tar -xf clash.tar -C .
            mv mihomo tools/clash || mv clash tools/clash
            if [ $? -ne 0 ]; then
              echo "::error::zstd 或 tar 处理失败。退出。"
              exit 1
            fi
          else
            echo "::error::未知文件格式，退出。"
            exit 1
          fi
          
          echo "已解压文件。文件大小:"
          ls -lh mihomo || ls -lh clash || true
          
          echo "移动文件到 tools/clash..."
          mv mihomo tools/clash || mv clash tools/clash || true
          if [ $? -ne 0 ]; then
            echo "::error::移动可执行文件失败。退出。"
            exit 1
          fi
          echo "Clash 已移动到 tools/clash。tools/ 目录内容:"
          ls -lh tools/
          
          echo "设置 tools/clash 的执行权限..."
          chmod +x tools/clash
          if [ $? -ne 0 ]; then
            echo "::error::设置执行权限失败。退出。"
            exit 1
          fi
          
          echo "检查 Clash 文件类型:"
          file tools/clash
          
          echo "验证 Clash 可执行文件..."
          tools/clash -v || {
            echo "::error::Clash 可执行文件验证失败，输出如下："
            tools/clash -v 2>&1
            exit 1
          }
          echo "Clash 可执行文件验证成功。"

      - name: 运行 Node.js 测试 # 步骤 7：执行 Node.js 测试脚本
        run: node test_nodes.js
        env:
          NODE_OPTIONS: "--experimental-fetch" # 确保 fetch API 可用

      - name: 提交测试结果 # 步骤 8：将测试结果提交回仓库
        run: |
          git config user.name "github-actions[bot]" # 配置 Git 用户名
          git config user.email "github-actions[bot]@users.noreply.github.com" # 配置 Git 用户邮箱
          if [ -f data/521.yaml ]; then # 检查 521.yaml 是否存在
            git add data/521.yaml # 添加 521.yaml
            git commit -m "Update node test results (via Clash) [skip ci]" || echo "No changes to commit" # 提交并跳过 CI
            git push # 推送更改
          else
            echo "data/521.yaml 未找到，跳过提交。"
          fi
        env:
          BOT: ${{ secrets.BOT }} # 使用重命名为 BOT 的令牌