name: Node Proxy Test

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch: # 允许手动触发

jobs:
  test-proxies:
    runs-on: ubuntu-latest # GitHub Actions Runner 操作系统

    steps:
      - name: Checkout repository # 步骤1：检出代码
        uses: actions/checkout@v4

      - name: Set up Node.js # 步骤2：设置 Node.js 环境
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Cache Node Modules # 步骤3：缓存 node_modules 减少安装时间
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install Dependencies # 步骤4：安装项目依赖
        run: npm install

      - name: Create tools and temp directories # 创建必要的目录
        run: |
          mkdir -p tools
          mkdir -p data # 如果data目录不存在的话，确保创建
          mkdir -p temp # 用于存放临时的Clash配置文件

      - name: Download Clash Core # 步骤5：下载 Clash 核心
        run: |
          CLASH_VERSION="v1.17.0" # <-- 检查并使用最新版本
          # 请根据你的 GitHub Actions Runner 操作系统选择正确的 URL
          # For Linux AMD64:
          CLASH_URL="https://github.com/Dreamacro/clash/releases/download/${CLASH_VERSION}/clash-linux-amd64-${CLASH_VERSION}.gz"
          # For macOS AMD64: (如果你在macOS runner上运行)
          # CLASH_URL="https://github.com/Dreamacro/clash/releases/download/${CLASH_VERSION}/clash-darwin-amd64-${CLASH_VERSION}.gz"
          
          wget -q ${CLASH_URL} -O clash.gz
          gzip -d clash.gz
          mv clash tools/clash # 移动到 tools 目录
          chmod +x tools/clash # 添加执行权限
          tools/clash -v # 验证下载和权限

      - name: Run Node.js Tests # 步骤6：运行 Node.js 测试脚本
        run: node test_nodes.js
        env:
          NODE_OPTIONS: "--experimental-fetch" # 确保 fetch API 可用，对于 Node.js 20+ 可能不是必需的但加上无害

      - name: Commit test results # 步骤7：将测试结果文件提交回仓库
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          if [ -f data/521.yaml ]; then
            git add data/521.yaml
            git commit -m "Update node test results (via Clash) [skip ci]" || echo "No changes to commit"
            git push
          else
            echo "data/521.yaml not found, skipping commit."
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
