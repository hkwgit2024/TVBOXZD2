# .github/workflows/speedtest.yml
name: Clash Speed Test and Sort

on:
  workflow_dispatch: # Allows manual trigger
  schedule:
    - cron: '0 */6 * * *' # Runs every 6 hours (adjust as needed)

jobs:
  speed-test-and-sort:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.x' # 使用最新的 Python 3.x 版本

    - name: Install PyYAML
      run: pip install PyYAML

    - name: Make Speedtest Tool Executable
      run: chmod +x ./speedtest-clash

    - name: Run Speed Test and Capture Output
      # Run speedtest-clash and redirect its full output to a temporary log file
      run: |
        echo "Starting speedtest-clash and capturing output..."
        ./speedtest-clash \
          -c ./clash_config.yaml \
          -output /dev/null \
          -sort b \
          -size 52428800 \
          -timeout 10s > speedtest_output.log 2>&1 # 重定向所有输出到文件
        
        EXIT_CODE=$?
        echo "speedtest-clash exited with code: ${EXIT_CODE}"
        echo "--- End of speedtest-clash run ---"
        # 打印日志文件内容，方便调试
        echo "--- Content of speedtest_output.log ---"
        cat speedtest_output.log
        echo "---------------------------------------"

    - name: Extract Sorted Proxies and Generate clash.yaml
      id: generate_clash_yaml
      run: |
        # 创建一个 Python 脚本文件
        cat << 'EOF' > generate_config.py
import json
import yaml
import sys

def parse_and_generate(log_file, original_config_file, output_file):
    sorted_proxies_json_str = ""
    # Search for the line containing the JSON proxy list in the log file
    with open(log_file, 'r') as f:
        for line in f:
            if '{"time":' in line and '"message":"json: [' in line:
                try:
                    log_entry = json.loads(line)
                    message_content = log_entry.get('message', '')
                    if message_content.startswith('json: ['):
                        sorted_proxies_json_str = message_content[len('json: '):]
                        break # Found the JSON, no need to read further
                except json.JSONDecodeError:
                    # Not a valid JSON log entry, skip
                    continue
    
    if not sorted_proxies_json_str:
        print(f"Error: Could not extract sorted proxies JSON from '{log_file}'. Exiting.")
        sys.exit(1)

    try:
        proxies_data = json.loads(sorted_proxies_json_str)
    except json.JSONDecodeError:
        print(f"Error: Extracted string is not valid JSON: {sorted_proxies_json_str}. Exiting.")
        sys.exit(1)

    # Load original Clash config
    try:
        with open(original_config_file, 'r', encoding='utf-8') as f:
            original_config = yaml.safe_load(f)
    except Exception as e:
        print(f"Error: Could not load original config '{original_config_file}': {e}. Exiting.")
        sys.exit(1)

    # Replace the 'proxies' section with the sorted data
    original_config['proxies'] = proxies_data

    # Dump the modified config to the output file
    try:
        with open(output_file, 'w', encoding='utf-8') as f:
            # Use default_flow_style=False to ensure each proxy is on a new line
            # sort_keys=False to preserve original key order in other sections
            yaml.dump(original_config, f, allow_unicode=True, default_flow_style=False, sort_keys=False)
    except Exception as e:
        print(f"Error: Could not write output config to '{output_file}': {e}. Exiting.")
        sys.exit(1)

    print(f"Successfully generated {output_file}")
    with open(output_file, 'r', encoding='utf-8') as f:
        print(f.read()) # Print content for debugging
EOF
        # 运行 Python 脚本
        python generate_config.py speedtest_output.log clash_config.yaml clash.yaml
      
    - name: Verify Generated File and Directory
      # Check if clash.yaml exists, and list directory contents
      id: check_file_after_generation
      run: |
        echo "Verifying 'clash.yaml' file existence after generation..."
        ls -la
        
        if [ -f "clash.yaml" ]; then
          echo "'clash.yaml' found! Content should be correct."
          echo "File size: $(du -h clash.yaml | awk '{print $1}')"
          echo "First 20 lines of 'clash.yaml':"
          head -n 20 clash.yaml
        else
          echo "Critical Error: 'clash.yaml' was NOT generated. Commit step will fail."
          exit 1 # Force job failure if file is not generated
        fi

    - name: Commit and Push Sorted Config
      uses: stefanzweifel/git-auto-commit-action@v5
      with:
        commit_message: "Update Clash config with sorted nodes by speed"
        files: clash.yaml
        branch: main
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      # Only attempt commit if previous steps succeeded and the file was verified
      if: success() && steps.check_file_after_generation.outcome == 'success'
