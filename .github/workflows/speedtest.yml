# .github/workflows/speedtest.yml
name: Clash 速度测试与排序

on:
  workflow_dispatch: # 允许手动触发
  schedule:
    - cron: '0 */6 * * *' # 每6小时运行一次，您可以根据需要调整

jobs:
  speed-test-and-sort:
    runs-on: ubuntu-latest

    steps:
    - name: 检出仓库
      uses: actions/checkout@v4

    - name: 赋予 clash-speedtest 执行权限
      run: |
        echo "赋予仓库中已上传的 'clash-speedtest' 执行权限..."
        chmod +x ./clash-speedtest
        echo "'clash-speedtest' 已设置为可执行文件。"
        if [ ! -f "./clash-speedtest" ]; then
          echo "错误: 未在仓库根目录找到 'clash-speedtest' 文件。请确保您已将其上传。"
          exit 1
        fi

    - name: 安装 yq 工具
      run: |
        echo "安装 yq 工具以便进行智能 YAML 合并..."
        # yq 的安装方法可能会根据版本不同，这里使用snap或者wget/chmod
        # 推荐使用 pip 安装 for Python yq，或者从 GitHub Releases 下载最新二进制
        # 对于 ubuntu-latest，通常可以直接安装：
        sudo apt-get update && sudo apt-get install -y yq # 如果是旧版本yq，可能是sudo snap install yq
        # 验证 yq 是否安装成功
        yq --version

    - name: 下载、修复并智能合并 Clash 订阅文件
      id: download_fix_and_merge_subs
      run: |
        echo "正在下载、修复并智能合并订阅文件..."
        TEMP_DIR="temp_subscriptions"
        mkdir -p $TEMP_DIR
        ALL_PROXIES_FILE="all_proxies_temp.yaml" # 用于存储所有代理列表
        FINAL_CLASH_CONFIG="fixed_clash_subscriptions.yaml" # 最终的修复并合并后的文件

        # 初始化一个空的代理列表
        echo "proxies: []" > "$ALL_PROXIES_FILE"

        IFS=',' read -ra URL_ARRAY <<< "${{ vars.NODE_LIST_URLs }}"
        for i in "${!URL_ARRAY[@]}"; do
          url="${URL_ARRAY[$i]}"
          temp_file="$TEMP_DIR/sub_${i}.yaml"
          echo "下载: $url 到 $temp_file"
          curl -s "$url" -o "$temp_file"

          if [ $? -ne 0 ]; then
            echo "错误: 无法下载订阅 $url"
            continue # 继续处理下一个URL
          fi

          echo "修复 $temp_file 中的 'tls' 布尔值类型错误..."
          # 使用 sed 替换 tls: "true" 为 tls: true，和 tls: "false" 为 tls: false
          sed -i 's/tls: "true"/tls: true/g' "$temp_file"
          sed -i 's/tls: "false"/tls: false/g' "$temp_file"
          
          # 使用 yq 提取代理并合并到 all_proxies_temp.yaml
          # 注意：yq 1.x 和 4.x+ 的语法不同，这里假设您安装的是较新版本（4.x+）
          # 如果您的订阅文件本身不是以 "proxies:" 开头的标准 Clash 订阅，可能需要调整
          echo "从 $temp_file 提取代理并合并..."
          # 检查文件是否有效且包含 'proxies' 键
          if yq '.proxies | length > 0' "$temp_file" &> /dev/null; then
              yq eval-all '. as $item load("'$(pwd)/$ALL_PROXIES_FILE'") | $item.proxies + .proxies' "$temp_file" > "$ALL_PROXIES_FILE.tmp" && mv "$ALL_PROXIES_FILE.tmp" "$ALL_PROXIES_FILE"
          else
              echo "警告: $temp_file 不包含有效的 'proxies' 键，或者为空。"
          fi
        done

        # 最终构造 Clash 配置
        echo "生成最终的 Clash 配置文件..."
        # 示例：仅包含 proxies。您可以根据需要添加其他默认配置，如 port, mode 等
        # 或者从一个模板文件开始，然后插入代理
        cat << EOF > "$FINAL_CLASH_CONFIG"
proxies:
EOF
        # 将合并后的代理列表追加到最终配置文件
        cat "$ALL_PROXIES_FILE" | yq '.proxies' - >> "$FINAL_CLASH_CONFIG"


        # 检查最终合并的文件是否生成
        if [ ! -f "$FINAL_CLASH_CONFIG" ] || [ ! -s "$FINAL_CLASH_CONFIG" ]; then
          echo "错误: 未能成功生成修复后的合并订阅文件 '$FINAL_CLASH_CONFIG'。"
          exit 1
        else
          echo "修复并合并后的订阅文件 '$FINAL_CLASH_CONFIG' 已生成，大小: $(du -h $FINAL_CLASH_CONFIG | awk '{print $1}')"
          echo "fixed_subs_path=$FINAL_CLASH_CONFIG" >> $GITHUB_OUTPUT
        fi

    - name: 运行速度测试并生成排序后的配置文件 (从修复后的本地文件获取节点)
      run: |
        echo "正在运行已上传的 'clash-speedtest'..."
        echo "将从修复后的本地文件 '${{ steps.download_fix_and_merge_subs.outputs.fixed_subs_path }}' 获取节点并进行测速。"
        ./clash-speedtest \
          -c "${{ steps.download_fix_and_merge_subs.outputs.fixed_subs_path }}" \
          -output ./clash.yaml \
          -download-size 5242880 \
          -timeout 5s \
          -concurrent 50 \
          -upload-size 5242880

        EXIT_CODE=$?
        echo "'clash-speedtest' 退出代码: ${EXIT_CODE}"
        if [ "$EXIT_CODE" -ne 0 ]; then
          echo "错误: 'clash-speedtest' 返回了非零退出代码。请检查其输出日志。"
          exit 1
        fi
        echo "--- 速度测试运行结束 ---"

    - name: 验证生成的 clash.yaml 文件
      id: check_file
      run: |
        echo "正在验证 'clash.yaml' 文件是否存在..."
        ls -la

        if [ -f "clash.yaml" ]; then
          echo "'clash.yaml' 文件已找到！内容预览:"
          echo "文件大小: $(du -h clash.yaml | awk '{print $1}')"
          head -n 20 clash.yaml # 打印文件前20行供检查
        else
          echo "严重错误: 'clash.yaml' 文件未能由 'clash-speedtest' 生成。"
          exit 1 # 如果文件未生成，强制作业失败
        fi
      if: success()

    - name: 提交并推送排序后的配置文件
      uses: stefanzweifel/git-auto-commit-action@v5
      with:
        commit_message: "更新 Clash 配置：节点已按速度排序 (从修复后的在线 URL 获取)"
        files: clash.yaml # 指定要提交的文件
        branch: main # 确保您的主分支名称是 'main' (或 'master')
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      if: success() && steps.check_file.outcome == 'success'
