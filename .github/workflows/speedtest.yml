# .github/workflows/speedtest.yml
name: Clash 速度测试与排序

on:
  workflow_dispatch:
  schedule:
    - cron: '0 */6 * * *'

jobs:
  speed-test-and-sort:
    runs-on: ubuntu-latest
    steps:
      - name: 检出仓库
        uses: actions/checkout@v4

      - name: 安装 yq 工具
        run: |
          echo "安装 yq 工具..."
          sudo apt-get update -y && sudo apt-get install -y yq
          yq --version

      - name: 赋予 clash-speedtest 执行权限
        run: |
          if [ ! -f "./clash-speedtest" ]; then
            echo "错误: 未找到 'clash-speedtest' 文件，请确保已上传至仓库根目录"
            exit 1
          fi
          chmod +x ./clash-speedtest
          echo "'clash-speedtest' 已设置为可执行文件"

      - name: 下载、修复并合并 Clash 订阅文件
        id: merge-subs
        run: |
          echo "下载、修复并合并订阅文件..."
          mkdir -p temp_subscriptions
          ALL_PROXIES="temp_proxies.yaml"
          FINAL_CONFIG="clash_subscriptions.yaml"
          echo "proxies: []" > "$ALL_PROXIES"

          IFS=',' read -ra URLS <<< "${{ vars.NODE_LIST_URLS }}"
          for i in "${!URLS[@]}"; do
            url="${URLS[$i]}"
            temp_file="temp_subscriptions/sub_${i}.yaml"
            echo "下载: $url"
            if ! curl -s --fail --connect-timeout 10 "$url" -o "$temp_file"; then
              echo "警告: 无法下载 $url，跳过"
              continue
            fi

            echo "修复 $temp_file 中的 TLS 配置..."
            sed -i 's/tls: "true"/tls: true/g; s/tls: "false"/tls: false/g' "$temp_file"

            if yq e '.proxies | length > 0' "$temp_file" &> /dev/null; then
              echo "合并 $temp_file 到 $ALL_PROXIES..."
              # 将管道拆分为临时文件处理，避免 YAML 解析问题
              yq e '.proxies' "$temp_file" > temp_proxies.yaml
              yq e -o yaml '. as $item ireduce ({}; .proxies += $item)' "$ALL_PROXIES" temp_proxies.yaml > temp.yaml
              mv temp.yaml "$ALL_PROXIES"
            else
              echo "警告: $temp_file 无有效 proxies，跳过"
            fi
          done

          if [ ! -s "$ALL_PROXIES" ]; then
            echo "错误: 未获取到任何有效代理"
            exit 1
          fi

          echo "生成最终 Clash 配置文件..."
          cat << EOF > "$FINAL_CONFIG"
# Clash 配置由 GitHub Actions 自动生成
port: 7890
socks-port: 7891
allow-lan: true
mode: rule
log-level: info
external-controller: 127.0.0.1:9090
proxies:
EOF
          yq e '.proxies' "$ALL_PROXIES" >> "$FINAL_CONFIG"
          echo "fixed_subs_path=$FINAL_CONFIG" >> $GITHUB_OUTPUT

      - name: 执行速度测试
        run: |
          echo "运行速度测试..."
          ./clash-speedtest -c "${{ steps.merge-subs.outputs.fixed_subs_path }}" \
            -output clash.yaml \
            -download-size 5242880 \
            -upload-size 5242880 \
            -timeout 5s \
            -concurrent 50 || {
              echo "错误: 速度测试失败"
              exit 1
            }

      - name: 验证生成的文件
        run: |
          if [ ! -s clash.yaml ]; then
            echo "错误: 未生成有效的 clash.yaml 文件"
            exit 1
          fi
          echo "clash.yaml 已生成，大小: $(du -h clash.yaml | awk '{print $1}')"
          head -n 20 clash.yaml

      - name: 提交排序后的配置文件
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "更新 Clash 配置：节点已按速度排序"
          file_pattern: clash.yaml
          branch: main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
