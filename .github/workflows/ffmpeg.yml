name: 测试

on:
  push:
    branches:
      - '.github/workflows/ffmpeg.yml'
  workflow_dispatch:
  schedule:
    # 每 6 小时运行一次
    # cron 表达式的语法: (分 时 日 月 周)
    - cron: '0 */6 * * *'

jobs:
  check-and-categorize:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.8'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install PyYAML requests tenacity cachetools tqdm psutil
          sudo apt-get update
          sudo apt-get install -y ffmpeg

      - name: Run channel check and categorization script
        run: |
          python check_and_categorize_channels.py

      - name: Commit and push changes
        run: |
          # 配置Git用户
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          
          # 提交本地更改
          git add .
          git commit -m "Update categorized IPTV lists" --allow-empty || echo "No changes to commit"
          
          # 强制拉取远程最新代码并覆盖本地冲突
          # 使用 'git fetch' 获取远程分支，然后 'git reset --hard' 强制重置本地分支
          # 这会丢弃所有本地未提交的更改，但由于我们已经创建了提交，所以是安全的
          git fetch origin main
          git reset --hard origin/main
          
          # 再次添加并提交本地更改
          # 由于上一步已经重置了本地分支，我们需要重新添加并提交
          git add .
          git commit -m "Update categorized IPTV lists"
          
          # 推送最终更改
          git push origin main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
