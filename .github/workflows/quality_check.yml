# .github/workflows/quality_check.yml
name: IPTV 质量检查

on:
  workflow_dispatch:
  schedule:
    - cron: '0 0 * * *'

jobs:
  quality_check_job:
    runs-on: ubuntu-latest

    steps:
    - name: 检出仓库代码
      uses: actions/checkout@v4

    - name: 设置 Python 环境
      uses: actions/setup-python@v5
      with:
        python-version: '3.x'

    - name: 安装 FFmpeg
      run: |
        sudo apt-get update
        sudo apt-get install -y ffmpeg
        echo "FFmpeg 安装完成。"
        # 额外检查，确认安装路径
        which ffmpeg || echo "ffmpeg 未找到路径！"
        which ffprobe || echo "ffprobe 未找到路径！"
        ffmpeg -version || echo "ffmpeg version check failed!"
        ffprobe -version || echo "ffprobe version check failed!"

    - name: 安装 Python 依赖
      run: pip install -r requirements.txt

    - name: 确保 iptv_list.txt 文件存在
      run: |
        if [ ! -f iptv_list.txt ]; then
          echo "警告：仓库根目录未找到 iptv_list.txt。为测试目的创建虚拟文件。"
          echo "CCTV1,http://example.com/cctv1.m3u8" > iptv_list.txt
          echo "测试频道,http://devimages.apple.com/samplecode/adrendering/basic_ad.m3u8" >> iptv_list.txt
        else
          echo "iptv_list.txt 已存在，将使用现有文件进行质量检查。"
        fi

    - name: **确认 FFmpeg 可用 (新增步骤)**
      run: |
        ffmpeg -version
        ffprobe -version
        echo "FFmpeg/FFprobe 版本信息已打印，确认可用。"
      # 确保即使版本信息打印失败，也不会阻止后续步骤（但我们希望它成功）
      # 这不是一个严格的错误检查，更多是用于调试
      continue-on-error: false # 如果这里报错，停止工作流

    - name: 运行 IPTV 质量检查器
      run: python main_quality_checker.py

    - name: 上传高质量 IPTV 列表作为工件 (Artifact)
      uses: actions/upload-artifact@v4
      with:
        name: iptv-high-quality-list
        path: iptv_high_quality.txt
        retention-days: 7

    - name: 提交并推送更改 (可选)
      run: |
        git config user.name "GitHub Actions"
        git config user.email "actions@github.com"
        git add iptv_high_quality.txt
        git commit -m "自动更新：高质量 IPTV 列表 ($(date +'%Y-%m-%d %H:%M'))" || echo "没有需要提交的更改"
        git push || echo "推送失败或没有更改"
      if: success()
