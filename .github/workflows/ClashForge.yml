name: ClashForge

on:
  schedule:
    - cron: '0 */3 * * *'  # 每3小时运行一次
  push:
    paths:
      - '.github/workflows/ClashForge.yml'
      - 'ClashForge.py'
  workflow_dispatch:  # 支持手动触发

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true  # 避免并发工作流冲突

env:
  TZ: Asia/Shanghai  # 设置时区为上海
  INPUT: ${{ vars.INPUT }}  # 使用 GitHub 变量

jobs:
  run_demo_actions:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.BOT }}  # 使用 bot token 进行代码检出

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10.10'  # 使用 Python 3.10.10

      - name: Install requirements.txt
        run: |
          pip install -r ./requirements2.txt
        continue-on-error: false  # 安装依赖失败时停止

      - name: Setup mihomo
        run: |
          ls -l ./mihomo
          gunzip -f ./mihomo/mihomo-linux-amd64-compatible-v1.19.13.gz
          chmod +x ./mihomo/mihomo-linux-amd64-compatible-v1.19.13
          ls -l ./mihomo
        continue-on-error: false  # mihomo 设置失败时停止

      - name: Run ClashForge.py
        run: |
          python ClashForge.py
        continue-on-error: false  # 脚本运行失败时停止

      - name: Reset working directory
        run: |
          git reset --hard  # 重置已追踪文件的更改
          git clean -fd     # 清理未追踪的文件和目录
        continue-on-error: true  # 如果重置失败，继续执行

      - name: Commit and push file
        run: |
          git config user.name "github-actions[bot]"
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          
          # 添加所有更改（包括新文件和修改）
          git add .
          
          # 检查是否有更改
          if ! git diff --staged --quiet; then
            echo "Changes detected, committing..."
            git commit -m "update: Auto-generated by ClashForge"
          else
            echo "No changes detected, creating an empty commit to force update."
            git commit --allow-empty -m "update: No changes detected"
          fi
          
          # 清理未追踪文件和目录
          git clean -fd
          
          # 尝试拉取和推送（最多重试3次）
          for i in {1..3}; do
            echo "Attempt $i to pull, rebase, and push..."
            git fetch origin
            git rebase origin/main
            if [ $? -eq 0 ]; then
              git push origin main
              if [ $? -eq 0 ]; then
                echo "Push successful on attempt $i."
                exit 0
              fi
            else
              echo "Rebase failed, attempting to reset and merge..."
              git rebase --abort
              git reset --hard origin/main
              git merge origin/main
              git add .
              git commit -m "merge: Resolve conflicts and update" || echo "No changes to commit after merge"
              git push origin main
              if [ $? -eq 0 ]; then
                echo "Push successful after merge on attempt $i."
                exit 0
              fi
            fi
            sleep 5
          done
          
          echo "Failed to push after multiple attempts. Manual intervention may be required."
          exit 1
