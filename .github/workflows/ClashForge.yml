name: ClashForge

on:
  schedule:
    - cron: '0 */3 * * *'
  push:
    paths:
      - '.github/workflows/ClashForge.yml'
      - 'ClashForge.py'
  workflow_dispatch:

env:
  TZ: Asia/Shanghai
  INPUT: ${{ vars.INPUT }}

jobs:
  run_demo_actions:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.BOT }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10.10'

      - name: Install requirements.txt
        run: |
          pip install -r ./requirements2.txt
        continue-on-error: false

      - name: Setup mihomo
        run: |
          ls -l ./mihomo
          gunzip -f ./mihomo/mihomo-linux-amd64-compatible-v1.19.13.gz
          chmod +x ./mihomo/mihomo-linux-amd64-compatible-v1.19.13
          ls -l ./mihomo
        continue-on-error: false

      - name: Run ClashForge.py
        run: |
          python ClashForge.py
        continue-on-error: false

      - name: Commit and push file
        run: |
          git config user.name "github-actions[bot]"
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          
          # 强制重置并清理工作区，避免未追踪的文件干扰
          git reset --hard
          git clean -fd
          
          # 添加两个配置文件到暂存区
          git add clash_config.yaml
          git add clash_config.yaml.json
          
          # 检查暂存区是否有变化
          if ! git diff --staged --quiet; then
            # 如果没有变化，创建一个空提交来强制更新
            echo "No changes detected, creating an empty commit to force update."
            git commit --allow-empty -m "update: No changes detected"
          else
            # 如果有变化，正常提交
            git commit -m "update"
          fi
          
          # 开始循环拉取、变基和推送，处理可能出现的并发冲突
          for i in {1..3}; do
            echo "Attempt $i to pull, rebase, and push..."
            git pull --rebase origin main
            
            if [ $? -eq 0 ]; then
              git push origin main
              if [ $? -eq 0 ]; then
                echo "Push successful on attempt $i."
                exit 0
              fi
            fi
            
            sleep 5
          done
          
          echo "Failed to push after multiple attempts. Manual intervention may be required."
          exit 1
