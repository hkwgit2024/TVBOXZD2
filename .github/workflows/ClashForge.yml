name: ClashForge

on:
  schedule:
    - cron: '0 */3 * * *'
  push:
    paths:
      - '.github/workflows/ClashForge.yml'
      - 'ClashForge.py'
      - 'requirements2.txt'
      - 'GeoLite2-Country.mmdb'
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  TZ: Asia/Shanghai
  INPUT: ${{ vars.INPUT }}

jobs:
  run_demo_actions:
    runs-on: ubuntu-latest
    timeout-minutes: 360
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.BOT }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10.10'

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libmaxminddb-dev jq
        continue-on-error: false

      - name: Install Python dependencies
        run: |
          pip install --upgrade pip
          echo "geoip2==2.9.0" > requirements2.txt
          echo "playwright==1.48.0" >> requirements2.txt
          echo "httpx==0.27.0" >> requirements2.txt
          echo "pyyaml==6.0.1" >> requirements2.txt
          echo "requests==2.31.0" >> requirements2.txt
          echo "psutil==5.9.8" >> requirements2.txt
          pip install -r requirements2.txt
          playwright install --with-deps
        continue-on-error: false

      - name: Auto-update GeoLite2-Country.mmdb
        run: |
          echo "Fetching latest GeoLite2-Country.mmdb release info..."
          API_URL="https://api.github.com/repos/P3TERX/GeoLite.mmdb/releases/latest"
          
          release_info=$(curl -s $API_URL)
          
          download_url=$(echo "$release_info" | jq -r '.assets[] | select(.name | endswith(".mmdb")) | .browser_download_url')
          sha256_url=$(echo "$release_info" | jq -r '.assets[] | select(.name | endswith(".mmdb.sha256")) | .browser_download_url')
          
          if [ -z "$download_url" ] || [ -z "$sha256_url" ]; then
            echo "Error: Could not find GeoLite2-Country.mmdb or its SHA256 in the latest release assets."
            exit 1
          fi
          
          expected_sha256=$(curl -s "$sha256_url" | awk '{print $1}')
          
          echo "Found latest version. Expected SHA256: $expected_sha256"
          
          if [ -f GeoLite2-Country.mmdb ]; then
            computed_sha256=$(sha256sum GeoLite2-Country.mmdb | awk '{print $1}')
            if [ "$computed_sha256" = "$expected_sha256" ]; then
              echo "GeoLite2-Country.mmdb is already up-to-date."
              exit 0
            else
              echo "GeoLite2-Country.mmdb is outdated. Downloading new version..."
              rm -f GeoLite2-Country.mmdb
            fi
          else
            echo "GeoLite2-Country.mmdb not found. Downloading..."
          fi
          
          wget -O GeoLite2-Country.mmdb "$download_url"
          
          computed_sha256=$(sha256sum GeoLite2-Country.mmdb | awk '{print $1}')
          if [ "$computed_sha256" != "$expected_sha256" ]; then
            echo "Error: Downloaded GeoLite2-Country.mmdb SHA256 mismatch!"
            exit 1
          fi
          
          echo "Successfully downloaded and verified GeoLite2-Country.mmdb."
        continue-on-error: false

      - name: Cache speed test results
        uses: actions/cache@v3
        with:
          path: speed_cache.json
          key: ${{ runner.os }}-speed-cache-${{ github.run_id }}
          restore-keys: |
            ${{ runner.os }}-speed-cache-

      - name: Run ClashForge.py
        run: |
          for i in {1..3}; do
            python ClashForge.py && break
            echo "Retry $i failed, waiting 5s..."
            sleep 5
          done
        continue-on-error: false

      - name: Debug file status
        run: |
          echo "Listing files after running ClashForge.py:"
          ls -l
          echo "Checking content of clash_config.yaml (if exists):"
          cat clash_config.yaml || echo "clash_config.yaml not found"
          echo "Checking content of clash_config.yaml.json (if exists):"
          cat clash_config.yaml.json || echo "clash_config.yaml.json not found"
        continue-on-error: true

      - name: Commit and push changes
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add .
          if ! git diff --staged --quiet; then
            echo "Changes detected, committing..."
            git commit -m "update: Auto-generated by ClashForge"
          else
            echo "No changes detected, creating an empty commit."
            git commit --allow-empty -m "update: No changes detected"
          fi
          git clean -fd
          for i in {1..3}; do
            echo "Attempt $i to pull, rebase, and push..."
            git fetch origin
            git rebase origin/main
            if [ $? -eq 0 ]; then
              git push origin main
              if [ $? -eq 0 ]; then
                echo "Push successful on attempt $i."
                exit 0
              fi
            else
              echo "Rebase failed, attempting to merge..."
              git rebase --abort
              git merge origin/main --no-edit
              git add .
              git commit -m "merge: Resolve conflicts and update" || true
              git push origin main
              if [ $? -eq 0 ]; then
                echo "Push successful after merge on attempt $i."
                exit 0
              fi
            fi
            sleep 5
          done
          echo "Failed to push after multiple attempts."
          exit 1
        continue-on-error: false

      - name: Notify on failure
        if: failure()
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.BOT }}
          script: |
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number || 1,
              body: `ClashForge workflow failed. Please check the logs for details.`
            })
