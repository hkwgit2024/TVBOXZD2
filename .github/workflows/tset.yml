# 工作流名称
name: Clash 速度测试

# 触发工作流的事件
on:
  workflow_dispatch:
  schedule:
    - cron: '0 */6 * * *'

jobs:
  speed-test-and-sort:
    runs-on: ubuntu-latest
    steps:
      - name: 检出仓库
        uses: actions/checkout@v4

      - name: 设置 Python 环境
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: 安装 Python 依赖
        run: |
          pip install PyYAML

      - name: 赋予 clash-speedtest 执行权限
        run: |
          echo "赋予 'clash-speedtest' 执行权限..."
          if [ ! -f "./clash-speedtest" ]; then
            echo "错误: 未找到 'clash-speedtest' 文件。请确保已上传到仓库根目录。"
            exit 1
          fi
          FILE_TYPE_INFO=$(file "./clash-speedtest")
          echo "clash-speedtest 文件类型信息: $FILE_TYPE_INFO"
          if ! echo "$FILE_TYPE_INFO" | grep -q "ELF 64-bit LSB executable"; then
              echo "错误: 'clash-speedtest' 文件不是预期的 Linux AMD64 可执行文件。请检查文件是否损坏或上传了错误版本。"
              exit 1
          fi
          chmod +x ./clash-speedtest
          echo "'clash-speedtest' 权限已设置并验证为可执行文件。"

      - name: 下载完整的 Clash 配置
        id: download_config
        run: |
          CONFIG_URL="https://raw.githubusercontent.com/qjlxg/vt/refs/heads/main/clash_config.yaml"
          OUTPUT_FILE="clash_config.yaml"
          echo "尝试从 $CONFIG_URL 下载完整的 Clash 配置文件..."
          curl -S -L -v --retry 5 --retry-delay 5 --connect-timeout 10 --max-time 60 --output "$OUTPUT_FILE" "$CONFIG_URL"
          if [ $? -ne 0 ]; then
            echo "错误: curl 命令执行失败，无法下载文件。"
            exit 1
          fi
          if [ ! -f "$OUTPUT_FILE" ]; then
            echo "错误: $OUTPUT_FILE 文件不存在。"
            exit 1
          fi
          if [ ! -s "$OUTPUT_FILE" ]; then
            echo "错误: $OUTPUT_FILE 文件为空。"
            head -n 20 "$OUTPUT_FILE" || true
            exit 1
          fi
          echo "$OUTPUT_FILE 文件下载成功，大小: $(du -h "$OUTPUT_FILE" | awk '{print $1}')"

      - name: 过滤节点 (使用 Python 脚本)
        run: python filter_clash_nodes.py
      
      - name: 验证过滤后的文件
        id: check_filtered_file
        run: |
          if [ ! -s "filtered_nodes.yaml" ]; then
            echo "警告: 'filtered_nodes.yaml' 文件为空或无有效内容。可能没有节点符合过滤条件。"
            echo "FILTERED_NODES_EMPTY=true" >> $GITHUB_OUTPUT 
            head -n 20 filtered_nodes.yaml || true
            exit 0
          fi
          echo "filtered_nodes.yaml 文件大小: $(du -h filtered_nodes.yaml | awk '{print $1}')"
          echo "FILTERED_NODES_EMPTY=false" >> $GITHUB_OUTPUT

      - name: 备份旧的 Clash 配置
        if: steps.check_filtered_file.outputs.FILTERED_NODES_EMPTY == 'false'
        run: |
          if [ ! -f "clash.yaml" ]; then
            echo "警告: 'clash.yaml' 文件不存在，跳过备份旧配置。"
            exit 0
          fi
          mkdir -p sc
          TIMESTAMP=$(date +%Y%m%d_%H%M%S)
          echo "正在备份旧的 clash.yaml 到 sc/clash_${TIMESTAMP}.yaml..."
          cp clash.yaml sc/clash_${TIMESTAMP}.yaml
          echo "旧配置备份完成。"

      - name: 运行速度测试 - 阶段二：下载/上传速度测试
        if: success() && steps.check_filtered_file.outputs.FILTERED_NODES_EMPTY == 'false'
        run: |
          echo "开始运行所有节点的完整速度测试..."
          # !!! 最关键的修改区域：确保以下每一行末尾的 '\' 后面都没有任何空格或注释 !!!
          ./clash-speedtest \
            -c ./filtered_nodes.yaml \
            -output ./clash.yaml \
            -download-size 5 \
            -upload-size 1 \
            -timeout 38s \
            -concurrent 50 \
            -max-latency 5000ms \
            -min-download-speed 1 \
            -min-upload-speed 0 \
            -rename
          echo "全速测试完成，结果保存到 clash.yaml"

      - name: 验证生成的 clash.yaml 文件
        id: check_final_file
        if: success() && steps.check_filtered_file.outputs.FILTERED_NODES_EMPTY == 'false'
        run: |
          if [ -f "clash.yaml" ]; then
            echo "'clash.yaml' 文件已生成，大小: $(du -h clash.yaml | awk '{print $1}')"
            echo "--- clash.yaml 文件内容 (前50行) ---"
            head -n 50 clash.yaml || true
            echo "----------------------------------------"
            if [ "$(grep -c 'name:' clash.yaml)" -eq 0 ]; then
              echo "警告: 'clash.yaml' 文件中没有检测到代理节点。可能所有节点都未通过速度测试后的过滤。"
              exit 1
            fi
          else
            echo "错误: 未生成 'clash.yaml'。速度测试可能失败或没有通过过滤的节点。"
            exit 1
          fi

      - name: 提交并推送排序后的配置文件
        if: success() && steps.check_final_file.outcome == 'success'
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "更新 Clash 配置：节点已按速度排序（靠近中国地区）并备份旧配置"
          file_pattern: "clash.yaml sc/"
          branch: main
          commit_user_name: github-actions[bot]
          commit_user_email: 41898282+github-actions[bot]@users.noreply.github.com
          commit_author: qjlxg <12179157+qjlxg@users.noreply.github.com>
          repository: .
          skip_dirty_check: false
          skip_fetch: false
          skip_checkout: false
          disable_globbing: false
          create_branch: false
          create_git_tag_only: false
          internal_git_binary: git
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
