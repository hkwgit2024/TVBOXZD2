name: test
on:
  workflow_dispatch:
  schedule:
    - cron: '0 */6 * * *' # 每 6 小时运行一次

jobs:
  speed-test-and-sort:
    runs-on: ubuntu-latest
    # 移除了 strategy 和 matrix 配置，现在只有一个作业实例

    steps:
      - name: 检出仓库
        uses: actions/checkout@v4

      - name: 设置 Python 环境
        uses: actions/setup-python@v5
        with:
          python-version: '3.x' # 使用最新的 Python 3 版本

      - name: 安装 Python 依赖
        run: pip install PyYAML

      - name: 赋予 clash-speedtest 执行权限
        run: |
          echo "赋予 'clash-speedtest' 执行权限..."
          chmod +x ./clash-speedtest
          if [ ! -f "./clash-speedtest" ]; then
            echo "错误: 未找到 'clash-speedtest' 文件"
            exit 1
          fi

      - name: 下载完整的 Clash 配置
        run: |
          echo "下载完整的 Clash 配置文件..."
          curl -s -o clash_config.yaml https://raw.githubusercontent.com/qjlxg/aggregator/refs/heads/main/data/clash.yaml
          if [ ! -s "clash_config.yaml" ]; then
            echo "错误: 未能下载到 clash_config.yaml 文件或文件为空。"
            exit 1
          fi

      - name: 过滤节点 (使用 Python 脚本)
        run: python filter_clash_nodes.py

      - name: 验证过滤后的文件
        run: |
          if [ ! -s "filtered_nodes.yaml" ]; then
            echo "警告: 'filtered_nodes.yaml' 文件为空或无有效内容。这可能意味着没有节点符合过滤条件。"
            # 如果没有节点进行测试，clash-speedtest 可能会报错，这里可以根据需要决定是否退出
            # exit 1 
          fi
          echo "--- filtered_nodes.yaml 内容 (前20行) ---"
          head -n 20 filtered_nodes.yaml
          echo "----------------------------------------"

      - name: 运行速度测试
        run: |
          echo "开始运行所有节点的测试..."
          # 因为取消了分组，所以直接输出到 clash.yaml
          ./clash-speedtest \
            -c filtered_nodes.yaml \
            -output ./clash.yaml \ # 直接输出到最终的 clash.yaml
            -download-size 1048576 \ # 1MB = 1048576 字节
            -upload-size 1048576 \   # 1MB = 1048576 字节
            -timeout 8s \
            -concurrent 20 \ # 注意：现在所有节点的测试都在一个并发池中进行
            -f 'US|JP|SG|HK' \
            -max-latency 800ms \
            -min-download-speed 2 \ # 单位为 MB/s (约 16Mbps)
            -min-upload-speed 1 \   # 单位为 MB/s (约 8Mbps)
            -rename \
            -fast

      # 移除了合并测试结果步骤，因为现在直接输出到 clash.yaml

      - name: 验证生成的 clash.yaml 文件
        id: check_file
        run: |
          if [ -f "clash.yaml" ]; then
            echo "'clash.yaml' 文件已生成，大小: $(du -h clash.yaml | awk '{print $1}')"
            head -n 20 clash.yaml # 打印文件前 20 行以供检查
          else
            echo "错误: 未生成 'clash.yaml'"
            exit 1
          fi

      - name: 提交并推送排序后的配置文件
        if: success() && steps.check_file.outcome == 'success'
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "更新 Clash 配置：节点已按速度排序"
          file_pattern: clash.yaml
          branch: main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
