name: Clash 速度测试
on:
  workflow_dispatch:
  schedule:
    - cron: '0 */6 * * *' # 每 6 小时运行一次

jobs:
  speed-test-and-sort:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node_subset: [1, 2, 3, 4] # 分 4 组并行测试

    steps:
      - name: 检出仓库
        uses: actions/checkout@v4

      - name: 赋予 clash-speedtest 执行权限
        run: |
          echo "赋予 'clash-speedtest' 执行权限..."
          chmod +x ./clash-speedtest
          if [ ! -f "./clash-speedtest" ]; then
            echo "错误: 未找到 'clash-speedtest' 文件"
            exit 1
          fi

      - name: 预过滤节点
        run: |
          echo "过滤节点，只保留 US、JP、SG、HK..."
          # 从指定 URL 下载 Clash 配置，并过滤只包含 US、Japan、Singapore、HK 的行
          curl -s https://raw.githubusercontent.com/qjlxg/vt/refs/heads/main/clash_config.yaml | grep -E 'US|Japan|Singapore|HK' > filtered_nodes.yaml
          # 检查过滤后的文件是否为空，如果为空则可能是上游文件有变动或过滤条件过严
          if [ ! -s "filtered_nodes.yaml" ]; then
            echo "警告: filtered_nodes.yaml 文件为空，请检查上游配置或过滤条件。"
            # 可以选择在这里 exit 1 或继续，取决于是否允许空文件进行测试
            # exit 1 
          fi


      - name: 运行速度测试
        run: |
          echo "测试节点子集 ${{ matrix.node_subset }}"
          ./clash-speedtest \
            -c filtered_nodes.yaml \
            -output ./clash_subset_${{ matrix.node_subset }}.yaml \
            -download-size 1048576 \ # 修正：1MB 等于 1048576 字节
            -upload-size 1048576 \   # 修正：1MB 等于 1048576 字节
            -timeout 8s \
            -concurrent 20 \
            -f 'US|JP|SG|HK' \
            -max-latency 800ms \
            -min-download-speed 2 \ # 单位为 MB/s，2 意味着 2MB/s (约 16Mbps)
            -min-upload-speed 1 \   # 单位为 MB/s，1 意味着 1MB/s (约 8Mbps)
            -rename \
            -fast

      - name: 合并测试结果
        # 只有当所有子作业成功时才合并，这需要在 workflow_dispatch 触发时注意
        # 对于 schedule 触发，如果一个子集失败，其他成功的也可能被取消
        # 这里使用 always() 可以确保即使某个子集失败，也会尝试合并已生成的结果
        if: always() # 修正：改为 always() 确保即使部分失败也尝试合并
        run: |
          echo "合并所有子集的测试结果..."
          # 确保只有文件存在时才 cat，避免因文件不存在而报错
          find . -name "clash_subset_*.yaml" -exec cat {} + > clash.yaml || true
          # 如果 find 命令没有找到任何文件，clash.yaml 可能为空，所以添加一个检查
          if [ ! -s "clash.yaml" ]; then
            echo "警告: clash.yaml 文件为空，可能没有节点通过测试或测试文件未生成。"
          fi

      - name: 验证生成的 clash.yaml 文件
        id: check_file
        run: |
          if [ -f "clash.yaml" ]; then
            echo "'clash.yaml' 文件已生成，大小: $(du -h clash.yaml | awk '{print $1}')"
            head -n 20 clash.yaml # 打印文件前 20 行以供检查
          else
            echo "错误: 未生成 'clash.yaml'"
            exit 1
          fi

      - name: 提交并推送排序后的配置文件
        # 只有在合并和验证步骤都成功后才提交
        if: success() && steps.check_file.outcome == 'success'
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "更新 Clash 配置：节点已按速度排序"
          file_pattern: clash.yaml
          branch: main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
