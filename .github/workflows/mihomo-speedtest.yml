name: Speedtest with i-abc/Speedtest

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y curl wget uuid-runtime yq
          # 安装最新 yq 版本
          sudo wget https://github.com/mikefarah/yq/releases/download/v4.35.2/yq_linux_amd64 -O /usr/bin/yq
          sudo chmod +x /usr/bin/yq
          yq --version

      - name: Install Clash
        run: |
          wget https://github.com/MetaCubeX/mihomo/releases/download/v1.18.9/mihomo-linux-amd64-v1.18.9.gz
          gunzip mihomo-linux-amd64-v1.18.9.gz
          chmod +x mihomo-linux-amd64-v1.18.9
          mv mihomo-linux-amd64-v1.18.9 /usr/local/bin/clash

      - name: Download i-abc/Speedtest
        run: |
          wget https://raw.githubusercontent.com/i-abc/Speedtest/main/speedtest.sh
          chmod +x speedtest.sh

      - name: Validate link.yaml
        run: |
          if [ ! -f "link.yaml" ]; then
            echo "Error: link.yaml 文件不存在"
            exit 1
          fi
          echo "link.yaml 内容："
          cat link.yaml || echo "无法读取 link.yaml"
          if [ ! -s "link.yaml" ]; then
            echo "Error: link.yaml 文件为空"
            exit 1
          fi
          if ! yq eval '.proxies' link.yaml > /dev/null 2>&1; then
            echo "Error: link.yaml 必须包含有效的 'proxies' 字段"
            exit 1
          fi
          proxies_length=$(yq eval '.proxies | length' link.yaml)
          if [ "$proxies_length" -eq 0 ]; then
            echo "Error: proxies 字段为空"
            exit 1
          fi
          echo "proxies 字段有效，包含 $proxies_length 个代理"

      - name: Convert link.yaml to Speedtest Node List
        run: |
          # 创建节点表文件
          echo "# 自定义代理节点表" > nodes.txt
          yq eval '.proxies[] | "speedtest-go," + .name + "," + "--custom-url http://" + .server + ":" + (.port | tostring) + "/speedtest/upload.php --ping-mode http"' link.yaml >> nodes.txt
          echo "节点表内容："
          cat nodes.txt

      - name: Fix link.yaml Configuration
        run: |
          cp link.yaml link.yaml.bak
          yq eval -i '
            .mixed-port = 7890 |
            .external-controller = "127.0.0.1:9090" |
            .allow-lan = true |
            .mode = "rule" |
            .log-level = "debug" |
            .proxies[].flow |= (if . == "null" then null else . end) |
            .proxies[].ws-opts.path |= (if . == "%2Fakamai" then "/akamai" else . end) |
            .proxies[].ws-opts.path |= (if . == "%2Fkr" then "/kr" else . end)
          ' link.yaml
          echo "修改后的 link.yaml 内容："
          cat link.yaml

      - name: Run Clash
        run: |
          clash -f link.yaml > clash_log.txt 2>&1 &
          CLASH_PID=$!
          sleep 20
          echo "Clash 启动日志："
          cat clash_log.txt
          if ! curl -s --connect-timeout 5 http://127.0.0.1:9090/version; then
            echo "Error: 无法连接 Clash 外部控制器 http://127.0.0.1:9090"
            kill $CLASH_PID 2>/dev/null || true
            exit 1
          fi
          echo "Clash 外部控制器就绪"
          echo "CLASH_PID=$CLASH_PID" >> $GITHUB_ENV

      - name: Run Speedtest
        env:
          http_proxy: http://127.0.0.1:7890
          https_proxy: http://127.0.0.1:7890
        run: |
          ./speedtest.sh -f nodes.txt > speedtest_log.txt 2>&1
          echo "speedtest.sh 日志："
          cat speedtest_log.txt

      - name: Cleanup Clash
        if: always()
        run: |
          if [ -n "${CLASH_PID}" ] && ps -p ${CLASH_PID} > /dev/null; then
            kill ${CLASH_PID}
          fi

      - name: Upload Logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: logs
          path: |
            clash_log.txt
            speedtest_log.txt
            link.yaml.bak
            nodes.txt
