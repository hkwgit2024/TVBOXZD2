name: Test Proxy Nodes with Clash.Meta

on:
  schedule:
    - cron: '0 18 * * *'  # UTC 18:00 = 北京时间 02:00
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  test-nodes:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install aiohttp PyYAML

      - name: Create data directory
        run: |
          mkdir -p data

      - name: Download Clash.Meta core
        id: download_clash_meta
        run: |
          # 动态检测架构
          ARCH=$(uname -m)
          case $ARCH in
            x86_64)
              ARCH="amd64"
              ;;
            aarch64)
              ARCH="arm64"
              ;;
            *)
              echo "::error::Unsupported architecture: $ARCH"
              exit 1
              ;;
          esac
          
          CLASH_META_VERSION="1.18.3" # 请替换为最新稳定版本，这里以 mihomo 为例
          # 从 MetaCubeX/mihomo 项目下载
          FILENAME="mihomo-linux-${ARCH}-v${CLASH_META_VERSION}"
          DOWNLOAD_URL="https://github.com/MetaCubeX/mihomo/releases/download/v${CLASH_META_VERSION}/${FILENAME}.gz" # 通常是 .gz 压缩
          
          echo "Downloading Clash.Meta from: ${DOWNLOAD_URL}"
          curl -L -o "${FILENAME}.gz" "${DOWNLOAD_URL}" || { echo "::error::Failed to download Clash.Meta"; exit 1; }
          
          # 验证下载文件
          if [ ! -s "${FILENAME}.gz" ]; then
            echo "::error::Downloaded file is empty or missing"
            exit 1
          fi
          
          gzip -d "${FILENAME}.gz" || { echo "::error::Failed to decompress Clash.Meta"; exit 1; } # 解压 .gz 文件
          mv "${FILENAME}" ./clash || { echo "::error::Failed to move clash executable"; exit 1; } # 重命名为 clash
          chmod +x ./clash
          
          # 验证 clash 可执行
          if [ ! -x ./clash ]; then
            echo "::error::clash is not executable"
            exit 1
          fi
          
          echo "CLASH_CORE_PATH=$(pwd)/clash" >> $GITHUB_ENV # 设置环境变量

      - name: Run Python node tester
        run: |
          python tester.py

      - name: Commit test results
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          
          # 检查 data/all.txt 是否存在且非空
          if [ ! -s data/all.txt ]; then
            echo "::warning::No valid test results in data/all.txt, skipping commit"
            exit 0
          fi
          
          # 检查是否有更改
          git add data/all.txt
          if git diff --cached --exit-code data/all.txt; then
            echo "::notice::No changes to commit in data/all.txt"
          else
            git commit -m "Update node test results [skip ci]"
            git push
            echo "::notice::Successfully committed and pushed updated test results"
          fi
