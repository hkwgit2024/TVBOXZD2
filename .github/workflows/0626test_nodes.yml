name: Test Nodes with Mihomo (Python)

on:
  workflow_dispatch: # 允许手动触发
  schedule:
    - cron: '0 */6 * * *' # 每6小时运行一次，您可以根据需要调整

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install Python dependencies
        run: pip install pyyaml requests

      - name: Install Mihomo
        run: |
          MIHOMO_VERSION="v1.18.9" # 您可以根据需要调整Mihomo版本
          wget -qO- https://github.com/MetaCubeX/mihomo/releases/download/${MIHOMO_VERSION}/mihomo-linux-amd64-${MIHOMO_VERSION}.gz | gzip -d > mihomo
          chmod +x mihomo
          sudo mv mihomo /usr/local/bin/mihomo

      - name: Create data directory
        run: mkdir -p data

      - name: Generate initial Mihomo config (placeholder)
        # Mihomo 启动时需要一个配置文件，这里创建一个空的作为占位符
        # 实际的配置会在Python脚本中生成并覆盖这个文件
        run: echo "{}" > config.yaml

      - name: Run Mihomo in background and wait for it to be ready
        run: |
          # 启动 Mihomo，将所有输出重定向到 mihomo_startup.log
          nohup mihomo -d . -f config.yaml &> mihomo_startup.log &
          MIHOMO_PID=$!
          echo "MIHOMO_PID=$MIHOMO_PID" >> $GITHUB_ENV
          echo "Mihomo started with PID: $MIHOMO_PID. Checking status..."
          
          # 等待 Mihomo 启动并监听端口
          timeout=90 # 最长等待90秒
          start_time=$(date +%s)
          
          # 使用 curl 尝试连接 Mihomo 控制器端口来判断是否就绪
          while true; do
            current_time=$(date +%s)
            elapsed=$((current_time - start_time))
            if [ $elapsed -ge $timeout ]; then
              echo "Error: Mihomo did not start listening on port 9090 within $timeout seconds."
              echo "--- Mihomo Startup Log ---"
              cat mihomo_startup.log # 打印 Mihomo 启动日志以便调试
              echo "--------------------------"
              exit 1 # 启动失败，退出工作流
            fi

            # 尝试连接 Mihomo 的外部控制器端口 (9090)
            # -s 静默模式
            # -o /dev/null 不保存输出
            # --connect-timeout 1 设置连接超时1秒
            # 如果 curl 成功（退出码为 0），则认为端口已开放
            if curl -s -o /dev/null --connect-timeout 1 http://127.0.0.1:9090; then
              echo "Mihomo controller port 9090 is accessible. Proceeding."
              break
            fi

            echo "Waiting for Mihomo controller to start (elapsed: ${elapsed}s)..."
            sleep 5 # 每5秒检查一次
          done

      - name: Run Python node tester
        # Python 脚本会下载节点，解析，生成新的 config.yaml，并进行测试
        run: python tester.py

      - name: Stop Mihomo
        if: always() # 无论上一步成功失败，都尝试停止Mihomo
        run: |
          if [ -n "${{ env.MIHOMO_PID }}" ]; then
            kill ${{ env.MIHOMO_PID }} || true
            echo "Mihomo stopped."
          fi
          # 清理 Mihomo 生成的临时文件
          rm -f config.yaml mihomo_startup.log cache.db

      - name: Commit and push if changes
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          # 只添加 data/all.txt，因为其他临时文件已添加到 .gitignore
          git add data/all.txt
          # 检查 data/all.txt 是否有实际变化，如果有，则提交更改
          git diff --quiet --exit-code || git commit -m "Update successful nodes"
          git push
