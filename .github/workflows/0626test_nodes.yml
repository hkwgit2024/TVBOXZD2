name: Test Nodes with Mihomo (Python)

on:
  workflow_dispatch: # 允许手动触发
  schedule:
    - cron: '0 */6 * * *' # 每6小时运行一次

jobs:
  test:
    runs-on: ubuntu-latest # 在 Ubuntu 最新版本上运行

    steps:
      - name: Checkout repository # 步骤1: 克隆仓库代码
        uses: actions/checkout@v4

      - name: Set up Python # 步骤2: 设置 Python 环境
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install Python dependencies # 步骤3: 安装 Python 依赖
        run: pip install pyyaml requests

      - name: Install jq # 步骤4: 安装 jq (用于解析 JSON)
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Get latest Mihomo release # 步骤5: 获取最新 Mihomo 发布版本
        run: |
          LATEST_RELEASE=$(curl -s https://api.github.com/repos/MetaCubeX/mihomo/releases/latest | jq -r .tag_name)
          echo "Latest Mihomo version: $LATEST_RELEASE"
          echo "CLASH_VERSION=$LATEST_RELEASE" >> $GITHUB_ENV

          # 查找适合 linux-amd64 的 .gz 或 .xz 文件
          ASSET_NAME=$(curl -s https://api.github.com/repos/MetaCubeX/mihomo/releases/latest | \
            jq -r '.assets[] | select(.name | contains("linux-amd64") and (endswith(".gz") or endswith(".xz"))) | .name' | head -n 1)

          if [ -z "$ASSET_NAME" ]; then
            echo "Error: No suitable Linux AMD64 .gz or .xz file found in release $LATEST_RELEASE"
            echo "Attempting to find any linux-amd64 asset for debug:"
            curl -s https://api.github.com/repos/MetaCubeX/mihomo/releases/latest | jq -r '.assets[] | select(.name | contains("linux-amd64")) | .name'
            exit 1
          fi
          echo "CLASH_FILENAME=$ASSET_NAME" >> $GITHUB_ENV
          echo "CLASH_DOWNLOAD_URL=https://github.com/MetaCubeX/mihomo/releases/download/${LATEST_RELEASE}/${ASSET_NAME}" >> $GITHUB_ENV

      - name: Install Mihomo Core # 步骤6: 安装 Mihomo Core
        run: |
          echo "Downloading Mihomo Core from ${{ env.CLASH_DOWNLOAD_URL }}..."
          for attempt in {1..3}; do
            if [[ "${{ env.CLASH_FILENAME }}" == *.gz ]]; then
              wget -qO- "${{ env.CLASH_DOWNLOAD_URL }}" | gzip -d > clash && break
            elif [[ "${{ env.CLASH_FILENAME }}" == *.xz ]]; then
              wget -qO- "${{ env.CLASH_DOWNLOAD_URL }}" | xz -d > clash && break
            else
              echo "Unsupported archive format: ${{ env.CLASH_FILENAME }}"
              exit 1
            fi
            echo "Download attempt $attempt failed, retrying..."
            sleep 5
          done
          if [ ! -f clash ] || [ ! -s clash ]; then
            echo "Error: Mihomo Core file 'clash' not found or is empty after download and extraction."
            echo "Please double-check the latest release on https://github.com/MetaCubeX/mihomo/releases."
            echo "Attempted URL: ${{ env.CLASH_DOWNLOAD_URL }}"
            exit 1
          fi
          chmod +x clash
          sudo mv clash /usr/local/bin/clash
          echo "Mihomo Core installed successfully at /usr/local/bin/clash."

      - name: Create data directory # 步骤7: 创建数据目录
        run: mkdir -p data

      - name: Generate Initial Clash Config (Placeholder) # 步骤8: 生成初始 Clash 配置 (非常关键，解决启动问题)
        run: |
          cat <<EOF > config.yaml
          port: 7890
          socks-port: 7891
          redir-port: 7892
          tproxy-port: 7893
          mixed-port: 7890
          mode: rule
          log-level: info
          allow-lan: false
          bind-address: 127.0.0.1
          external-controller: 127.0.0.1:9090
          dns:
            enable: true
            listen: 0.0.0.0:53
            default-nameserver: ["114.114.114.114", "8.8.8.8"]
            enhanced-mode: fake-ip
            fake-ip-range: "198.18.0.1/16"
            use-hosts: true
            fallback: ["tls://1.1.1.1:853", "tls://8.8.8.8:853"]
            fallback-filter:
              geoip: true
              ipcidr: ["240.0.0.0/4"]
          proxies: [] # 初始启动时可以为空，后续由 Python 脚本填充

          proxy-groups:
            - name: "Node Select"
              type: select
              proxies:
                - DIRECT # 初始至少有一个代理，确保 Clash 正常启动
            - name: "Auto Select"
              type: url-test
              url: "http://www.gstatic.com/generate_204"
              interval: 300
              proxies:
                - DIRECT # 初始至少有一个代理，确保 Clash 正常启动

          rules:
            - PROCESS-NAME,clash,DIRECT
            - PROCESS-NAME,Clash,DIRECT
            - PROCESS-NAME,clash-core,DIRECT
            - DOMAIN-SUFFIX,googlevideo.com,Node Select
            - DOMAIN-SUFFIX,googleusercontent.com,Node Select
            - DOMAIN-SUFFIX,google.com,Node Select
            - DOMAIN-SUFFIX,github.com,DIRECT
            - MATCH,Node Select
          EOF
          echo "Generated initial config.yaml for Mihomo startup."

      - name: Start Mihomo Core and wait for it to be ready # 步骤9: 启动 Mihomo Core 并等待其就绪
        run: |
          echo "Starting Mihomo Core in background..."
          # 以后台方式启动 Clash Core，并将日志重定向到 clash_startup.log
          nohup clash -d . -f config.yaml &> clash_startup.log &
          CLASH_PID=$!
          echo "CLASH_PID=$CLASH_PID" >> $GITHUB_ENV # 保存 PID 到环境变量，以便后续停止
          echo "Mihomo Core started with PID: $CLASH_PID. Checking status..."
          timeout=90 # 设置等待超时时间
          start_time=$(date +%s)
          while true; do
            current_time=$(date +%s)
            elapsed=$((current_time - start_time))
            if [ $elapsed -ge $timeout ]; then
              echo "Error: Mihomo Core did not start listening on port 9090 within $timeout seconds."
              echo "--- Mihomo Core Startup Log (Final) ---"
              cat clash_startup.log # 打印完整日志以供调试
              echo "--------------------------"
              if ! ps -p $CLASH_PID > /dev/null; then
                echo "Error: Mihomo Core process (PID: $CLASH_PID) is not running."
              fi
              exit 1 # 超时则退出
            fi
            # 尝试通过 curl 访问 Mihomo 的控制器 API
            if curl -s -o /dev/null --connect-timeout 1 http://127.0.0.1:9090/proxies; then
              echo "Mihomo Core controller port 9090 is accessible. Proceeding."
              break # 成功连接则跳出循环
            fi
            echo "Waiting for Mihomo Core controller to start (elapsed: ${elapsed}s)..."
            echo "--- Latest Mihomo Log (elapsed: ${elapsed}s) ---"
            tail -n 10 clash_startup.log # 实时显示最新日志
            echo "-------------------------------------"
            sleep 5 # 等待5秒后重试
          done
          echo "Mihomo Core is ready. Now running tester.py."

      - name: Run Python node tester # 步骤10: 运行 Python 节点测试脚本 (Mihomo 启动后运行)
        run: python tester.py

      - name: Stop Mihomo Core # 步骤11: 停止 Mihomo Core (无论成功失败都执行)
        if: always() # 确保即使前面的步骤失败，也会执行此清理步骤
        run: |
          if [ -n "${{ env.CLASH_PID }}" ]; then # 检查 PID 是否存在
            echo "Stopping Mihomo Core with PID ${{ env.CLASH_PID }}..."
            kill ${{ env.CLASH_PID }} || true # 终止进程
            echo "Mihomo Core stopped."
          fi
          # 清理 Mihomo 生成的文件
          rm -f config.yaml clash_startup.log cache.db
          echo "Cleaned up Mihomo related files."

      - name: Commit and push if changes # 步骤12: 如果有更改则提交并推送
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"

          # 检查 data/all.txt 是否存在且不为空，避免空提交
          if [ -s data/all.txt ]; then
            git add data/all.txt
            if ! git diff --cached --quiet; then # 检查是否有实际更改
              git commit -m "Update successful nodes"
              git push
              echo "Changes committed and pushed."
            else
              echo "No changes to data/all.txt. Skipping commit."
            fi
          else
            echo "data/all.txt is empty or does not exist. Skipping commit."
          fi
