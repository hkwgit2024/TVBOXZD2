name: Test Nodes with Mihomo (Python)

on:
  workflow_dispatch: # 允许手动触发
  schedule:
    - cron: '0 */6 * * *' # 每6小时运行一次

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install Python dependencies
        run: pip install requests pyyaml

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Get latest Mihomo release
        id: get_mihomo_release
        run: |
          MIHOMO_RELEASE_URL=$(curl -s https://api.github.com/repos/MetaCubeX/mihomo/releases/latest | jq -r '.assets[] | select(.name | contains("linux-amd64")) | .browser_download_url')
          echo "MIHOMO_RELEASE_URL=${MIHOMO_RELEASE_URL}" >> $GITHUB_OUTPUT

      - name: Install Mihomo Core
        run: |
          wget -O mihomo.gz ${{ steps.get_mihomo_release.outputs.MIHOMO_RELEASE_URL }}
          gunzip mihomo.gz
          mv mihomo mihomo
          chmod +x mihomo

      - name: Create data directory
        run: mkdir -p data

      - name: Generate Initial Clash Config (Placeholder)
        # 这一步是为了确保 Mihomo 启动时有一个 config.yaml 文件
        # 实际的配置会在 Python 脚本中生成并替换
        run: |
          echo "port: 7890" > config.yaml
          echo "socks-port: 7891" >> config.yaml
          echo "allow-lan: false" >> config.yaml
          echo "mode: rule" >> config.yaml
          echo "log-level: info" >> config.yaml
          echo "external-controller: 127.0.0.1:9090" >> config.yaml
          echo "proxies: []" >> config.yaml
          echo "proxy-groups:" >> config.yaml
          echo "  - name: GLOBAL" >> config.yaml
          echo "    type: select" >> config.yaml
          echo "    proxies: [DIRECT]" >> config.yaml
          echo "rules:" >> config.yaml
          echo "  - MATCH,DIRECT" >> config.yaml


      - name: Start Mihomo Core and wait for it to be ready
        id: start_mihomo
        run: |
          echo "Starting Mihomo Core in background..."
          # 启动 Mihomo 在后台运行，并将所有输出重定向到 mihomo.log
          # 我们将 log-level 设置为 debug，以获取更详细的日志
          ./mihomo -d . -f config.yaml > mihomo.log 2>&1 &
          echo "Mihomo Core started with PID: $!."
          PID=$!
          echo "::set-output name=mihomo_pid::$PID"

          echo "Waiting for Mihomo Core controller to start (elapsed: 0s)..."
          for i in $(seq 1 30); do
            if nc -z 127.0.0.1 9090; then
              echo "Mihomo Core controller port 9090 is accessible. Proceeding."
              break
            fi
            echo "Waiting for Mihomo Core controller to start (elapsed: ${i}s)..."
            echo "--- 最新 Mihomo 日志 (已用时间: ${i}s) ---"
            tail -n 20 mihomo.log || true
            echo "-------------------------------------"
            sleep 1
            if [ $i -eq 30 ]; then
              echo "Mihomo Core controller did not start in time. Aborting."
              echo "--- 最终 Mihomo 日志 ---"
              cat mihomo.log || true
              echo "------------------------"
              exit 1
            fi
          done
          echo "Mihomo Core is ready. Now running tester.py."

      - name: Run Python node tester
        run: python tester.py

      - name: Stop Mihomo Core
        if: always()
        run: |
          if [ -n "${{ steps.start_mihomo.outputs.mihomo_pid }}" ]; then
            echo "Stopping Mihomo Core PID: ${{ steps.start_mihomo.outputs.mihomo_pid }}"
            kill ${{ steps.start_mihomo.outputs.mihomo_pid }} || true
            sleep 2
            kill -9 ${{ steps.start_mihomo.outputs.mihomo_pid }} || true
          fi

      - name: Upload Mihomo Logs (for debugging)
        if: always() # 无论前面的步骤是否失败，都执行此步骤
        uses: actions/upload-artifact@v4
        with:
          name: mihomo-logs
          path: mihomo.log
          
      - name: Commit and push if changes
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add data/all.txt
          git commit -m "Update working nodes" || echo "No changes to commit"
          git push
