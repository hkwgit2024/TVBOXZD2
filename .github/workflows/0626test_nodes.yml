name: Test Nodes with Clash (Python)

on:
  workflow_dispatch: # 允许手动触发
  schedule:
    - cron: '0 */6 * * *' # 每6小时运行一次

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install Python dependencies
        run: pip install pyyaml requests

      - name: Install Clash Core
        run: |
          # 下载最新的 Clash Core Linux AMD64 版本
          CLASH_VERSION="v1.18.0" # 你可以根据需要调整 Clash 版本
          # 查找最新版本，Clash Meta 的命名通常是 clash.meta-linux-amd64-{version}.gz
          # 或者直接使用 Clash Premium 的命名 clash-linux-amd64-{version}.gz
          # 这里以 Clash Meta 为例，请根据实际使用的 Clash Core 版本调整下载链接
          # 目前流行的可能是 Clash.Meta 或 Clash Premium
          # 假设使用 Clash.Meta
          CLASH_DOWNLOAD_URL="https://github.com/MetaCubeX/Clash.Meta/releases/download/${CLASH_VERSION}/clash.meta-linux-amd64-${CLASH_VERSION}.gz"
          
          # Fallback to Clash Premium if Meta not found or preferred
          # CLASH_DOWNLOAD_URL="https://github.com/Dreamacro/clash/releases/download/${CLASH_VERSION}/clash-linux-amd64-${CLASH_VERSION}.gz"

          echo "Downloading Clash Core from ${CLASH_DOWNLOAD_URL}..."
          wget -qO- ${CLASH_DOWNLOAD_URL} | gzip -d > clash
          chmod +x clash
          sudo mv clash /usr/local/bin/clash

      - name: Create data directory
        run: mkdir -p data

      - name: Generate initial Clash config (placeholder)
        # Clash 启动时需要一个配置文件，这里创建一个空的作为占位符
        # 实际的配置会在Python脚本中生成并覆盖这个文件
        run: echo "{}" > config.yaml

      - name: Run Clash Core in background and wait for it to be ready
        run: |
          echo "Starting Clash Core in background..."
          # 启动 Clash Core，将所有输出重定向到 clash_startup.log
          nohup clash -d . -f config.yaml &> clash_startup.log &
          CLASH_PID=$!
          echo "CLASH_PID=$CLASH_PID" >> $GITHUB_ENV
          echo "Clash Core started with PID: $CLASH_PID. Checking status..."
          
          # 等待 Clash Core 启动并监听端口
          timeout=90 # 最长等待90秒
          start_time=$(date +%s)
          
          while true; do
            current_time=$(date +%s)
            elapsed=$((current_time - start_time))
            if [ $elapsed -ge $timeout ]; then
              echo "Error: Clash Core did not start listening on port 9090 within $timeout seconds."
              echo "--- Clash Core Startup Log (Final) ---"
              cat clash_startup.log # 打印 Clash 启动日志以便调试
              echo "--------------------------"
              exit 1 # 启动失败，退出工作流
            fi

            # 尝试连接 Clash Core 的外部控制器端口 (9090)
            # -s 静默模式
            # -o /dev/null 不保存输出
            # --connect-timeout 1 设置连接超时1秒
            # 如果 curl 成功（退出码为 0），则认为端口已开放
            if curl -s -o /dev/null --connect-timeout 1 http://127.0.0.1:9090; then
              echo "Clash Core controller port 9090 is accessible. Proceeding."
              break
            fi

            echo "Waiting for Clash Core controller to start (elapsed: ${elapsed}s)..."
            # 每次等待后，打印 clash_startup.log 的最新内容，帮助诊断
            echo "--- Latest Clash Log (elapsed: ${elapsed}s) ---"
            tail -n 10 clash_startup.log # 打印最新10行日志
            echo "-------------------------------------"
            sleep 5 # 每5秒检查一次
          done

      - name: Run Python node tester
        # Python 脚本会下载节点，解析，生成新的 config.yaml，并进行测试
        run: python tester.py

      - name: Stop Clash Core
        if: always() # 无论上一步成功失败，都尝试停止Clash Core
        run: |
          if [ -n "${{ env.CLASH_PID }}" ]; then
            kill ${{ env.CLASH_PID }} || true
            echo "Clash Core stopped."
          fi
          # 清理 Clash Core 生成的临时文件
          rm -f config.yaml clash_startup.log cache.db # Clash 通常也会生成 cache.db

      - name: Commit and push if changes
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          # 只添加 data/all.txt，因为其他临时文件已添加到 .gitignore
          git add data/all.txt
          # 检查 data/all.txt 是否有实际变化，如果有，则提交更改
          git diff --quiet --exit-code || git commit -m "Update successful nodes"
          git push
