name: Test Nodes with Mihomo (Python)

on:
  workflow_dispatch:
  schedule:
    - cron: '0 */6 * * *'

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install Python dependencies
        run: pip install pyyaml requests

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Get latest Mihomo release
        run: |
          LATEST_RELEASE=$(curl -s https://api.github.com/repos/MetaCubeX/mihomo/releases/latest | jq -r .tag_name)
          echo "Latest Mihomo version: $LATEST_RELEASE"
          echo "CLASH_VERSION=$LATEST_RELEASE" >> $GITHUB_ENV
          ASSET_NAME=$(curl -s https://api.github.com/repos/MetaCubeX/mihomo/releases/latest | jq -r '.assets[] | select(.name | contains("linux-amd64") and endswith(".gz")) | .name' | head -n 1)
          if [ -z "$ASSET_NAME" ]; then
            echo "Error: No Linux AMD64 .gz file found in release $LATEST_RELEASE"
            exit 1
          fi
          echo "CLASH_FILENAME=$ASSET_NAME" >> $GITHUB_ENV

      - name: Install Mihomo Core
        run: |
          CLASH_DOWNLOAD_URL="https://github.com/MetaCubeX/mihomo/releases/download/${{ env.CLASH_VERSION }}/${{ env.CLASH_FILENAME }}"
          echo "Downloading Mihomo Core from ${CLASH_DOWNLOAD_URL}..."
          for attempt in {1..3}; do
            wget -qO- "${CLASH_DOWNLOAD_URL}" | gzip -d > clash && break || true
            echo "Download attempt $attempt failed, retrying..."
            sleep 5
          done
          if [ ! -f clash ] || [ ! -s clash ]; then 
            echo "Error: Mihomo Core file 'clash' not found or is empty after download and extraction."
            echo "Please double-check the latest release on https://github.com/MetaCubeX/mihomo/releases."
            echo "Attempted URL: ${CLASH_DOWNLOAD_URL}"
            exit 1
          fi
          chmod +x clash
          sudo mv clash /usr/local/bin/clash
          echo "Mihomo Core installed successfully at /usr/local/bin/clash."

      - name: Create data directory
        run: mkdir -p data

      - name: Run Python node tester
        run: python tester.py

      - name: Start Mihomo Core and wait for it to be ready
        run: |
          echo "Starting Mihomo Core in background..."
          nohup clash -d . -f config.yaml &> clash_startup.log &
          CLASH_PID=$!
          echo "CLASH_PID=$CLASH_PID" >> $GITHUB_ENV
          echo "Mihomo Core started with PID: $CLASH_PID. Checking status..."
          timeout=90
          start_time=$(date +%s)
          while true; do
            current_time=$(date +%s)
            elapsed=$((current_time - start_time))
            if [ $elapsed -ge $timeout ]; then
              echo "Error: Mihomo Core did not start listening on port 9090 within $timeout seconds."
              echo "--- Mihomo Core Startup Log (Final) ---"
              cat clash_startup.log
              echo "--------------------------"
              if ! ps -p $CLASH_PID > /dev/null; then
                echo "Error: Mihomo Core process (PID: $CLASH_PID) is not running."
              fi
              exit 1
            fi
            if curl -s -o /dev/null --connect-timeout 1 http://127.0.0.1:9090/proxies; then
              echo "Mihomo Core controller port 9110 is accessible. Proceeding."
              break
            fi
            echo "Waiting for Mihomo Core controller to start (elapsed: ${elapsed}s)..."
            echo "--- Latest Mihomo Log (elapsed: ${elapsed}s) ---"
            tail -n 10 clash_startup.log
            echo "-------------------------------------"
            sleep 5
          done

      - name: Stop Mihomo Core
        if: always()
        run: |
          if [ -n "${{ env.CLASH_PID }}" ]; then
            echo "Stopping Mihomo Core with PID ${{ env.CLASH_PID }}..."
            kill ${{ env.CLASH_PID }} || true
            echo "Mihomo Core stopped."
          fi
          rm -f config.yaml clash_startup.log cache.db

      - name: Commit and push if changes
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git add data/all.txt
          git diff --cached --quiet --exit-code || git commit -m "Update successful nodes"
          git push
