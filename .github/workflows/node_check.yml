name: Discover and Process Proxy Nodes # 工作流名称，现在包含“发现”功能

on:
  push:
    branches:
      - main # 当推送到 main 分支时触发
  workflow_dispatch: # 允许手动触发工作流

jobs:
  process-nodes:
    runs-on: ubuntu-latest # 在最新的 Ubuntu 环境上运行
    steps:
      - name: Checkout repository # 检出代码仓库
        uses: actions/checkout@v4

      - name: Set up Python # 设置 Python 环境
        uses: actions/setup-python@v5
        with:
          python-version: '3.x' # 使用最新的 Python 3 版本

      - name: Install dependencies # 安装 Python 依赖
        run: |
          python -m pip install --upgrade pip # 升级 pip
          pip install requests pyyaml
          pip install aiohttp pyyaml # 安装所需的库 (requests 在您的脚本中没有直接使用，可以省略)

      - name: Create data directory if not exists # 创建数据目录
        run: mkdir -p data

      - name: Run URL Discovery Script (extract_nodes.py) # 运行 URL 发现脚本
        env:
          GITHUB_TOKEN: ${{ secrets.BOT }}
        run: |
          # 运行脚本并将输出同时打印到控制台和日志文件
          # 将日志文件输出到 data/ 目录
          python extract_nodes.py | tee data/extract_nodes_discovery.log
        timeout-minutes: 10 # 设置此步骤的超时时间

      - name: Run Node Extraction and Testing Script (extract_nodes_from_hy2.py) # 运行节点提取和测试脚本
        env:
          BOT: ${{ secrets.GITHUB_TOKEN }} # 传递 GitHub Token
          TEST_NODES: "true" # 启用节点测试
          TEST_MAX_NODES: "50" # 测试的最大节点数
          TEST_TIMEOUT: "1" # 测试超时时间
        run: |
          # 这个脚本现在会读取由 extract_nodes.py 生成的 data/hy2.txt
          # 运行脚本并将输出同时打印到控制台和日志文件
          # 将日志文件输出到 data/ 目录
          python extract_nodes_from_hy2.py | tee data/extract_nodes_processing.log
        timeout-minutes: 15 # 设置此步骤的超时时间

      - name: Upload logs and data as artifacts # 上传日志和数据作为 Artifacts
        if: always() # 无论之前的步骤是否成功，都执行此步骤
        uses: actions/upload-artifact@v4
        with:
          name: processed-proxy-nodes-artifacts # Artifact 的名称
          path: data/ # **关键更改：直接上传整个 data 目录的内容**
          # 移除了所有单独列出的文件，因为 data/temp_nodes.txt 应该被排除
          # 这种方式更简洁，并且可以包含 data 目录下的所有相关文件

          if-no-files-found: warn # 如果文件未找到，只发出警告而不是失败

      - name: Commit and push changes # 提交并推送更改
        run: |
          git config --global user.name 'GitHub Action' # 配置 Git 用户名
          git config --global user.email 'action@github.com' # 配置 Git 用户邮箱
          
          # 移除任何尝试操作 data/temp_nodes.txt 的命令，因为它不应该被提交
          # 脚本会在完成后删除它。

          # 添加所有 data/ 目录下发生变化的文件
          # 警告：如果 .gitignore 忽略了某些文件，它们将不会被添加。
          # 如果希望强制添加被忽略的文件，请使用 git add -f data/
          git add data/
          
          # 只有当有实际的更改需要提交时才执行 commit
          git diff --staged --quiet || git commit -m "Automated: Update proxy nodes and logs"
          
          # 推送更改到远程仓库
          git push
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # 传递 GitHub Token 用于 Git 推送
