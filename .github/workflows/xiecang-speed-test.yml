name: 测速

on:
  push:
    paths:
      - '.github/workflows/xiecang-speed-test.yml'
  
  schedule:
    - cron: '0 */3 * * *'
  # 允许手动触发
  workflow_dispatch:

env:
  # 从仓库 Secrets 中获取订阅链接
  SOURCES: ${{ secrets.SOURCES }}
  TZ: Asia/Shanghai

jobs:
  run-speedtest:
    runs-on: ubuntu-latest
    
    steps:
      - name: 检出仓库代码
        uses: actions/checkout@v4
      
      - name: 设置 Go 环境
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'
      
      - name: 下载远程配置文件
        run: |
          set -e  # 任何命令失败立即退出
          
          # 清空旧的 config.yaml
          echo "" > config.yaml
          
          # 将 SOURCES 变量按逗号分割，遍历每个 URL
          IFS=',' read -ra urls <<< "$SOURCES"
          
          for url in "${urls[@]}"; do
            echo "正在下载: $url"
            # 使用 curl 下载并追加到 config.yaml
            curl -s -L "$url" >> config.yaml
          done
          
          # 检查文件是否为空
          if [ ! -s config.yaml ]; then
            echo "错误：下载的 config.yaml 文件为空或没有内容。请检查您的 SOURCES 链接是否有效。"
            exit 1
          fi

      - name: 安装 clash-speedtest 工具
        run: go install github.com/faceair/clash-speedtest@latest
      
      - name: 创建备份目录
        run: mkdir -p sc

      - name: 运行测速并筛选节点
        run: |
          clash-speedtest -c config.yaml \
                        -output clash.yaml \
                        -max-latency 808ms \
                        -min-download-speed 18.8 \
                        -rename \

      - name: 备份本次运行结果
        run: |
          TIMESTAMP=$(date +'%Y%m%d_%H%M%S')
          cp clash.yaml sc/clash_$TIMESTAMP.yaml

      - name: 提交并推送更改
        run: |
          git config --global user.name 'github-actions'
          git config --global user.email 'github-actions@github.com'
          
          # 仅添加新生成的 config.yaml 和 clash.yaml 文件
          git add config.yaml clash.yaml
          
          if ! git diff --cached --quiet; then
            git commit -m "chore: Update and filter Clash nodes via speedtest"
            
            for i in {1..3}; do
              git pull --rebase
              git push && break
              sleep 5
            done
          else
            echo "没有节点更改，无需提交。"
          fi
