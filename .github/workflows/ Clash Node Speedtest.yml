name: Clash 节点全面测速与更新

on:
  push: # 当代码被推送到仓库时自动触发
    branches:
      - main # 监听 main 分支的推送，请根据你的主分支名称修改
  workflow_dispatch: # 允许手动从 GitHub Actions 页面触发
  schedule:
    - cron: '0 */3 * * *' # 每 3 小时自动运行一次（可选）

jobs:
  run_full_speedtest:
    runs-on: ubuntu-latest # 使用最新的 Ubuntu 运行环境

    steps:
    - name: 检出仓库 # 步骤 1: 克隆你的 GitHub 仓库代码
      uses: actions/checkout@v4

    - name: 下载 clash-speedtest 二进制文件 # 步骤 2: 从 GitHub Releases 下载预编译的二进制文件
      run: |
        TOOL_VERSION="v1.7.0"
        TOOL_NAME="clash-speedtest"
        OS_ARCH="Linux_x86_64" 
        DOWNLOAD_URL="https://github.com/faceair/${TOOL_NAME}/releases/download/${TOOL_VERSION}/${TOOL_NAME}_${OS_ARCH}.tar.gz"
        
        echo "正在从以下地址下载 ${TOOL_NAME}: ${DOWNLOAD_URL}"
        
        curl -L "${DOWNLOAD_URL}" -o "${TOOL_NAME}.tar.gz"
        tar -xzf "${TOOL_NAME}.tar.gz"
        chmod +x "${TOOL_NAME}"
        echo "::set-output name=tool_path::./${TOOL_NAME}"
      id: download_tool

    - name: 运行 Clash 全面测速并生成配置 # 步骤 3: 执行全面的测速并将结果保存
      run: |
        mkdir -p output # 确保 'output' 文件夹存在
        # clash-speedtest 命令及参数
        ./clash-speedtest \
          -c https://raw.githubusercontent.com/qjlxg/vt/refs/heads/main/clash_config.yaml \ # 指定 Clash 配置文件的来源 URL
          -output output/clash.yaml \                                                        # 指定测速结果的输出文件路径
          -rename \                                                                          # 根据 IP 地理位置和测速结果重命名节点
          -concurrent 10 \                                                                   # 同时进行下载测试的代理节点数量（并发数）
          -download-size 50MB \                                                              # 下载测试文件的目标大小
          -upload-size 20MB \                                                                # 上传测试文件的目标大小
          -timeout 5s \                                                                      # 每个代理节点的测试超时时间
          -max-latency 800ms \                                                               # 过滤掉延迟高于 800ms 的代理节点
          -min-download-speed 1.0 \                                                          # 过滤掉下载速度低于 1.0 MB/s 的代理节点
          -min-upload-speed 0.5                                                              # 过滤掉上传速度低于 0.5 MB/s 的代理节点

    - name: 提交并推送结果 # 步骤 4: 提交更新后的配置文件到仓库
      run: |
        git add output/clash.yaml
        git commit -m "Update clash.yaml with latest speedtest results" || echo "没有需要提交的更改"
        git push
