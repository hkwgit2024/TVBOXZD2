name: Test Proxy Nodes

on:
  push:
    branches: [ main ]
  schedule:
    - cron: '0 0 * * *' # 每天 UTC 00:00 运行
  workflow_dispatch: # 允许手动触发

permissions:
  contents: write # 允许写入仓库

jobs:
  test-proxies:
    runs-on: ubuntu-latest

    steps:
      # 检出仓库
      - name: Checkout Repository
        uses: actions/checkout@v4

      # 设置 Node.js
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      # 下载代理节点
      - name: Download Proxy List
        run: |
          curl -o sub_2.txt https://raw.githubusercontent.com/qjlxg/vt/refs/heads/main/data/sub_2.txt

      # 解析节点并生成 Clash 配置文件
      - name: Parse Proxy Nodes
        run: |
          node -e '
            const fs = require("fs");
            const nodes = fs.readFileSync("sub_2.txt", "utf8").split("\n").filter(line => line.trim());
            const proxies = nodes.map((node, index) => {
              try {
                if (node.match(/^hysteria2:\/\/([^@]+)@([^:]+):(\d+)/)) {
                  const [, password, server, port] = node.match(/^hysteria2:\/\/([^@]+)@([^:]+):(\d+)/);
                  return { name: `hysteria2-${index}`, type: "hysteria2", server, port: parseInt(port), password };
                } else if (node.match(/^trojan:\/\/([^@]+)@([^:]+):(\d+)/)) {
                  const [, password, server, port] = node.match(/^trojan:\/\/([^@]+)@([^:]+):(\d+)/);
                  return { name: `trojan-${index}`, type: "trojan", server, port: parseInt(port), password };
                } else if (node.match(/^vmess:\/\/(.+)/)) {
                  const base64 = node.split("://")[1];
                  const decoded = JSON.parse(Buffer.from(base64, "base64").toString("utf8"));
                  return { name: `vmess-${index}`, type: "vmess", server: decoded.add, port: parseInt(decoded.port), uuid: decoded.id, alterId: decoded.aid || 0, cipher: decoded.scy || "auto" };
                } else if (node.match(/^ss:\/\/(.+)/)) {
                  const base64 = node.split("://")[1].split("#")[0];
                  const decoded = Buffer.from(base64, "base64").toString("utf8");
                  const [method, password, rest] = decoded.split(/[@:]/);
                  const [server, port] = rest.split(":");
                  return { name: `ss-${index}`, type: "ss", server, port: parseInt(port), password, cipher: method };
                } else if (node.match(/^ssr:\/\/(.+)/)) {
                  const base64 = node.split("://")[1];
                  const decoded = Buffer.from(base64, "base64").toString("utf8");
                  const params = new URLSearchParams(decoded.split("/?")[1] || "");
                  const [server, port, protocol, cipher, obfs, password] = decoded.split(":");
                  return { name: `ssr-${index}`, type: "ssr", server, port: parseInt(port), password: Buffer.from(password, "base64").toString("utf8"), cipher, obfs, protocol };
                } else if (node.match(/^vless:\/\/([^@]+)@([^:]+):(\d+)/)) {
                  const [, uuid, server, port] = node.match(/^vless:\/\/([^@]+)@([^:]+):(\d+)/);
                  return { name: `vless-${index}`, type: "vless", server, port: parseInt(port), uuid };
                }
                return null;
              } catch (e) {
                console.error(`Error parsing node: ${node}, Error: ${e.message}`);
                return null;
              }
            }).filter(Boolean);
            const clashConfig = {
              proxies,
              "proxy-groups": [{ name: "auto", type: "select", proxies: proxies.map(p => p.name) }],
              rules: ["MATCH,auto"]
            };
            fs.writeFileSync("clash.yaml", JSON.stringify(clashConfig, null, 2));
          '

      # 测试节点（使用 Clash）
      - name: Test with Clash
        run: |
          # 启动 Clash 容器
          docker run -d --name clash dreamacro/clash
          # 创建配置目录
          docker exec clash mkdir -p /root/.config/clash
          # 复制配置文件到正确路径
          docker cp clash.yaml clash:/root/.config/clash/config.yaml
          # 测试配置有效性
          docker exec clash sh -c "clash -f /root/.config/clash/config.yaml -t > /root/.config/clash/test-results.txt || echo 'Clash configuration test failed' > /root/.config/clash/test-results.txt"
          docker cp clash:/root/.config/clash/test-results.txt clash-results.txt
          # 延迟测试
          node -e '
            const fs = require("fs");
            const { execSync } = require("child_process");
            const nodes = JSON.parse(fs.readFileSync("clash.yaml", "utf8")).proxies;
            const results = [];
            for (const proxy of nodes) {
              try {
                const start = Date.now();
                // 使用 HTTP 代理测试（避免 UDP 限制）
                let proxyUrl = "";
                if (proxy.type === "http" || proxy.type === "https") {
                  proxyUrl = `${proxy.type}://${proxy.server}:${proxy.port}`;
                } else if (proxy.type === "ss" || proxy.type === "trojan") {
                  proxyUrl = `http://${proxy.server}:${proxy.port}`; // 简化为 HTTP 测试
                } else {
                  results.push(`${proxy.name}: Skipped, Unsupported protocol (${proxy.type}) in GitHub Actions`);
                  continue;
                }
                execSync(`curl -s -o /dev/null --max-time 5 -x ${proxyUrl} https://api.github.com`, { stdio: "ignore" });
                const latency = Date.now() - start;
                results.push(`${proxy.name}: Working, Latency: ${latency}ms`);
              } catch (e) {
                results.push(`${proxy.name}: Failed, Error: ${e.message}`);
              }
            }
            fs.writeFileSync("latency-results.txt", results.join("\n"));
          '

      # 保存结果到 data/all.txt
      - name: Save Results to data/all.txt
        run: |
          mkdir -p data
          echo "Clash Test Results:" > data/all.txt
          cat clash-results.txt >> data/all.txt
          echo -e "\nLatency Test Results:" >> data/all.txt
          cat latency-results.txt >> data/all.txt

      # 提交结果到仓库
      - name: Commit Results
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add data/all.txt
          git commit -m "Update proxy test results in data/all.txt" || echo "No changes to commit"
          git push origin main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # 上传 artifact（调试用）
      - name: Upload Results
        uses: actions/upload-artifact@v4
        with:
          name: proxy-test-results
          path: |
            clash-results.txt
            latency-results.txt
