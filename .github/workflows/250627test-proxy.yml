name: Test Proxy Nodes

on:
  push:
    branches: [ main ]
  schedule:
    - cron: '0 0 * * *' # Run daily at 00:00 UTC
  workflow_dispatch: # Allow manual trigger

permissions:
  contents: write # Allow writing to repository

jobs:
  test-proxies:
    runs-on: ubuntu-latest

    steps:
      # Checkout repository
      - name: Checkout Repository
        uses: actions/checkout@v4

      # Set up Node.js
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      # Download proxy list
      - name: Download Proxy List
        run: |
          curl -o sub_2.txt https://raw.githubusercontent.com/qjlxg/vt/refs/heads/main/data/sub_2.txt

      # Decode proxy nodes
      - name: Decode Proxy Nodes
        run: |
          node -e '
            const fs = require("fs");
            const nodes = fs.readFileSync("sub_2.txt", "utf8").split("\n").filter(line => line.trim());
            const decodedNodes = nodes.map(node => {
              try {
                if (node.match(/^(vmess|ss|trojan|vless|ssr|hysteria2):\/\//)) {
                  const base64 = node.split("://")[1];
                  return Buffer.from(base64, "base64").toString("utf8");
                }
                return node; // Keep non-Base64 nodes
              } catch (e) {
                console.error(`Error decoding node: ${node}, Error: ${e.message}`);
                return null; // Skip invalid nodes
              }
            }).filter(Boolean);
            fs.writeFileSync("nodes.txt", decodedNodes.join("\n"));
          '

      # Clone and test with 256cats/check-proxy
      - name: Test with check-proxy
        run: |
          git clone https://github.com/256cats/check-proxy.git
          cd check-proxy
          npm install
          # Debug: List directory to verify index.js
          ls -la
          node index.js --file ../nodes.txt --timeout 5000 --url https://api.github.com --threads 5 > ../check-proxy-results.txt || echo "Check-proxy test failed" >> ../check-proxy-results.txt

      # Clone and test with yahoo/proxy-verifier
      - name: Test with proxy-verifier
        run: |
          git clone https://github.com/yahoo/proxy-verifier.git
          cd proxy-verifier
          npm install
          # Filter HTTP proxies
          grep -E '^http://' ../nodes.txt > ../http_proxies.txt || echo "No HTTP proxies found" > ../http_proxies.txt
          if [ -s ../http_proxies.txt ]; then
            node verifier-client.js --proxy $(head -n 1 ../http_proxies.txt) > ../proxy-verifier-results.txt || echo "Proxy-verifier test failed" >> ../proxy-verifier-results.txt
          else
            echo "No HTTP proxies to test" > ../proxy-verifier-results.txt
          fi

      # Test non-HTTP protocols with Clash
      - name: Test with Clash
        run: |
          docker run -d --name clash dreamacro/clash
          # Convert nodes to Clash YAML
          node -e '
            const fs = require("fs");
            const nodes = fs.readFileSync("sub_2.txt", "utf8").split("\n").filter(line => line.trim());
            const proxies = nodes.map((node, index) => {
              if (node.match(/^hysteria2:\/\/([^@]+)@([^:]+):(\d+)/)) {
                const [, password, server, port] = node.match(/^hysteria2:\/\/([^@]+)@([^:]+):(\d+)/);
                return { name: `hysteria2-${index}`, type: "hysteria2", server, port: parseInt(port), password };
              } else if (node.match(/^trojan:\/\/([^@]+)@([^:]+):(\d+)/)) {
                const [, password, server, port] = node.match(/^trojan:\/\/([^@]+)@([^:]+):(\d+)/);
                return { name: `trojan-${index}`, type: "trojan", server, port: parseInt(port), password };
              } else if (node.match(/^vmess:\/\/(.+)/)) {
                const base64 = node.split("://")[1];
                try {
                  const decoded = JSON.parse(Buffer.from(base64, "base64").toString("utf8"));
                  return { name: `vmess-${index}`, type: "vmess", server: decoded.add, port: parseInt(decoded.port), uuid: decoded.id };
                } catch (e) {
                  return null;
                }
              }
              return null;
            }).filter(Boolean);
            fs.writeFileSync("clash.yaml", `proxies:\n${proxies.map(p => ` - ${JSON.stringify(p)}`).join("\n")}`);
          '
          docker cp clash.yaml clash:/etc/clash/config.yaml
          docker exec clash clash -f /etc/clash/config.yaml -t > clash-results.txt || echo "Clash test failed" >> clash-results.txt

      # Combine and save results to data/all.txt
      - name: Save Results to data/all.txt
        run: |
          mkdir -p data
          echo "Check-Proxy Results:" > data/all.txt
          cat check-proxy-results.txt >> data/all.txt
          echo -e "\nProxy-Verifier Results:" >> data/all.txt
          cat proxy-verifier-results.txt >> data/all.txt
          echo -e "\nClash Results:" >> data/all.txt
          cat clash-results.txt >> data/all.txt

      # Commit and push results to repository
      - name: Commit Results
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add data/all.txt
          git commit -m "Update proxy test results in data/all.txt" || echo "No changes to commit"
          git push origin main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Upload artifacts (optional, for debugging)
      - name: Upload Results
        uses: actions/upload-artifact@v4
        with:
          name: proxy-test-results
          path: |
            check-proxy-results.txt
            proxy-verifier-results.txt
            clash-results.txt
