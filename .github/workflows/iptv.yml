name: IPTV 250724

# 触发条件
on:
  workflow_dispatch:  # 允许手动触发
  schedule:
    - cron: '0 */168 * * *'  # 当前配置为每 168 小时（即每周）运行一次。
                             # 如果您想每天在 UTC 时间 0:00、8:00、16:00 运行，请更改为 '0 0,8,16 * * *'

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 360  # 设置 6 小时超时
    permissions:
      contents: write # 授予写入权限，用于提交和推送更改

    steps:
      # 步骤1：检查 BOT secret
      - name: 检查 BOT secret
        run: |
          if [ -z "${{ secrets.BOT }}" ]; then
            echo "错误：未设置 BOT secret，请在 GitHub Secrets 中配置"
            exit 1
          fi
        shell: bash

      # 步骤2：检出代码
      # 这步非常关键，它将你的仓库内容（包括 tv.py 和 config 目录）克隆到运行环境中。
      - name: 检出代码
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # 获取完整提交历史，便于 rebase
          token: ${{ secrets.BOT }}  # 使用 BOT secret 进行认证 (如果你需要写入私有仓库)

      # 步骤3：设置 Python 环境
      - name: 设置 Python 环境
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip' # 缓存 pip 依赖

      # 步骤4：安装依赖
      - name: 安装依赖
        run: |
          python -m pip install --upgrade pip
          pip install requests pyyaml tenacity
      # 步骤5：运行 IPTV 脚本
      - name: 运行 IPTV 脚本
        run: python tv.py
        env:
          # 这些环境变量会被传递给 tv.py 脚本
          BOT: ${{ secrets.BOT }}              
          REPO_OWNER: qjlxg                  
          REPO_NAME: vt                    
          CONFIG_PATH: config/config.yaml     
          URLS_PATH: config/urls.txt         
          URL_STATES_PATH: config/url_states.json 

     

      # 步骤6：上传工件（可选）
      - name: 上传生成的 IPTV 列表
        uses: actions/upload-artifact@v4
        with:
          name: iptv-list
          path: |
            iptv_list.txt      # 捕获生成的最终 IPTV 列表
            temp_channels/*.txt # 捕获临时生成的所有分类 .txt 文件
            uncategorized_iptv.txt # 捕获未分类的 IPTV 列表（如果生成）
          retention-days: 7
          if-no-files-found: warn
          compression-level: 6
          overwrite: false
          include-hidden-files: false
        if: always()

      # 步骤7：检查文件更改
      - name: 检查文件更改
        id: check_changes
        run: |
          git add .
          if git diff --staged --quiet; then
            echo "没有文件更改"
            echo "has_changes=false" >> $GITHUB_OUTPUT
          else
            echo "检测到文件更改"
            echo "has_changes=true" >> $GITHUB_OUTPUT
          fi
        shell: bash

      # 步骤8：提交更改
      - name: 提交更改
        if: steps.check_changes.outputs.has_changes == 'true'
        run: |
          git config --global user.email "actions@github.com"
          git config --global user.name "GitHub Actions"
          git commit --allow-empty -m "更新 IPTV 频道列表 ($(date +'%Y-%m-%d %H:%M'))"

      # 步骤9：推送更改
      - name: 推送更改
        if: steps.check_changes.outputs.has_changes == 'true'
        run: |
          git push
