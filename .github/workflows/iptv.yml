name: IPTV 频道更新

on:
  workflow_dispatch:
  schedule:
    - cron: '0 */8 * * *'

jobs:
  update-iptv:
    runs-on: ubuntu-latest
    timeout-minutes: 360  # 恢复 6 小时超时
    permissions:
      contents: write

    steps:
      - name: 检查 BOT secret
        run: |
          if [ -z "${{ secrets.BOT }}" ]; then
            echo "错误：未设置 BOT secret，请在 GitHub Secrets 中配置"
            exit 1
          fi
        shell: bash

      - name: 检出代码
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.BOT }}

      - name: 检查 GitHub API 速率限制
        run: |
          curl -H "Authorization: token ${{ secrets.BOT }}" \
          https://api.github.com/rate_limit

      - name: 设置 Python 环境
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'

      - name: 安装 Python 依赖
        run: |
          pip install --upgrade pip
          pip install requests pyyaml aiohttp beautifulsoup4 tenacity aiofiles psutil dnspython tqdm

      - name: 设置时区
        run: sudo timedatectl set-timezone 'Asia/Shanghai'

      - name: 安装 FFmpeg
        run: |
          sudo apt-get update
          sudo apt-get install -y ffmpeg

      - name: 验证 ffprobe
        run: |
          if command -v ffprobe >/dev/null 2>&1; then
            echo "ffprobe 已找到并可用！版本信息如下："
            ffprobe -version
          else
            echo "错误：ffprobe 未找到或无法执行！请检查上一步的 FFmpeg 安装日志。"
            exit 1

      - name: 运行 IPTV 爬取脚本
        env:
          BOT: ${{ secrets.BOT }}
          REPO_OWNER: ${{ vars.REPO_OWNER }}
          REPO_NAME: ${{ vars.REPO_NAME }}
          CONFIG_PATH: ${{ vars.CONFIG_PATH }}
          URLS_PATH: ${{ vars.URLS_PATH }}
          URL_STATES_PATH: ${{ vars.URL_STATES_PATH }}
          LOG_LEVEL: "DEBUG"
        run: |
          python --version
          python -c "from logging.handlers import RotatingFileHandler; print('日志模块导入成功')"
          python ${{ github.workspace }}/tv.py 2>&1 | tee iptv_crawler.log  # 统一为 iptv_crawler.log
        # 移除 continue-on-error: true，确保失败时终止

      - name: 检查文件状态
        run: |
          echo "检查文件状态："
          ls -lh config/*.json || echo "无 JSON 文件"
          ls -lh *.txt || echo "无 TXT 文件"
          ls -lh 地方频道/*.txt || echo "无分类文件"
          ls -lh output/*.txt || echo "无输出文件"
          cat unmatched_channels.txt || echo "unmatched_channels.txt 为空或不存在"
          cat output/iptv_list.txt || echo "iptv_list.txt 为空或不存在"
        continue-on-error: true

      - name: 保存日志和生成文件
        uses: actions/upload-artifact@v4
        with:
          name: iptv-results
          path: |
            *.txt
            config/*.txt
            config/*.json
            地方频道/*.txt
            output/*.txt
            iptv_crawler.log
          retention-days: 7
          if-no-files-found: warn
          compression-level: 6
        if: always()

      - name: 检查文件更改
        id: check_changes
        run: |
          git add .
          if git diff --staged --quiet; then
            echo "没有文件更改"
            echo "has_changes=false" >> $GITHUB_OUTPUT
          else
            echo "检测到文件更改"
            echo "has_changes=true" >> $GITHUB_OUTPUT
          fi

      - name: 强制提交空更改
        if: steps.check_changes.outputs.has_changes == 'false'
        run: |
          git commit --allow-empty -m "强制提交空更改以记录运行 ($(date -u +'%Y-%m-%d %H:%M UTC'))"
          echo "has_changes=true" >> $GITHUB_OUTPUT

      - name: 检查合并冲突
        if: steps.check_changes.outputs.has_changes == 'true' || steps.force_commit.outputs.has_changes == 'true'
        run: |
          git fetch origin
          git diff --name-only --diff-filter=U > conflicts.txt
          if [ -s conflicts.txt ]; then
            echo "错误：检测到合并冲突，以下文件有冲突："
            cat conflicts.txt
            exit 1
          fi

      - name: 提交更改
        if: steps.check_changes.outputs.has_changes == 'true' || steps.force_commit.outputs.has_changes == 'true'
        run: |
          git config --global user.email "actions@github.com"
          git config --global user.name "GitHub Actions"
          git commit -m "更新 IPTV 频道列表 ($(date -u +'%Y-%m-%d %H:%M UTC'))" || true

      - name: 推送更改
        if: steps.check_changes.outputs.has_changes == 'true' || steps.force_commit.outputs.has_changes == 'true'
        run: |
          git fetch origin
          git rebase origin/main || {
            echo "Rebase 失败，尝试合并"
            git rebase --abort
            git merge origin/main --no-ff
          }
          git push origin main
        env:
          GITHUB_TOKEN: ${{ secrets.BOT }}

      - name: 发送通知
        if: always()
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.BOT }}
          script: |
            const fs = require('fs');
            const logContent = fs.existsSync('iptv_crawler.log') ? fs.readFileSync('iptv_crawler.log', 'utf8').slice(-10000) : '无日志';
            const status = '${{ job.status }}';
            const message = `IPTV 频道更新工作流完成\n状态: ${status}\n日志摘要:\n${logContent}`;
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: 1,
              body: message
            });
