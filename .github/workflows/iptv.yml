name: IPTV 频道更新

on:
  workflow_dispatch:  # 允许手动触发
  schedule:
    - cron: '0 */8 * * *'  # 每天 UTC 时间 0:00、8:00、16:00

jobs:
  update-iptv:
    runs-on: ubuntu-latest
    timeout-minutes: 120
    permissions:
      contents: write

    steps:
      # 步骤 1：检查 BOT secret
      - name: 检查 BOT secret
        run: |
          if [ -z "${{ secrets.BOT }}" ]; then
            echo "错误：未设置 BOT secret，请在 GitHub Secrets 中配置"
            exit 1
          fi
        shell: bash

      # 步骤 2：检出代码
      - name: 检出代码
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.BOT }}

      # 步骤 3：检查 GitHub API 速率限制
      - name: 检查 GitHub API 速率限制
        run: |
          curl -H "Authorization: token ${{ secrets.BOT }}" https://api.github.com/rate_limit
        continue-on-error: true

      # 步骤 4：设置 Python 环境
      - name: 设置 Python 环境
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'

      # 步骤 5：安装 Python 依赖
      - name: 安装 Python 依赖
        run: |
          pip install requests aiohttp pyyaml tenacity dnspython tqdm aiofiles

      # 步骤 6：检查 Python 环境
      - name: 检查 Python 环境
        run: |
          python --version
          pip list

      # 步骤 7：设置时区
      - name: 设置时区
        run: sudo timedatectl set-timezone 'Asia/Shanghai'

      # 步骤 8：安装 FFmpeg
      - name: 安装 FFmpeg
        run: |
          sudo apt-get update
          sudo apt-get install -y ffmpeg

      # 步骤 9：验证 ffprobe
      - name: 验证 ffprobe
        run: |
          if command -v ffprobe >/dev/null 2>&1; then
            echo "ffprobe 已安装："
            ffprobe -version
          else
            echo "错误：ffprobe 未找到"
            exit 1
          fi

      # 步骤 10：运行 IPTV 爬取脚本
      - name: 运行 IPTV 爬取脚本
        env:
          BOT: ${{ secrets.BOT }}
          REPO_OWNER: ${{ vars.REPO_OWNER }}
          REPO_NAME: ${{ vars.REPO_NAME }}
          CONFIG_PATH: ${{ vars.CONFIG_PATH }}
          URLS_PATH: ${{ vars.URLS_PATH }}
          URL_STATES_PATH: ${{ vars.URL_STATES_PATH }}
        run: |
          python --version
          python -c "from logging.handlers import RotatingFileHandler; print('日志模块导入成功')"
          python ${{ github.workspace }}/tv.py 2>&1 | tee iptv_script.log
        continue-on-error: true

      # 步骤 11：检查文件状态
      - name: 检查文件状态
        run: |
          echo "检查文件状态："
          ls -lh config/*.json || echo "无 JSON 文件"
          ls -lh *.txt || echo "无 TXT 文件"
          ls -lh 地方频道/*.txt || echo "无分类文件"
        continue-on-error: true

      # 步骤 12：保存日志和生成文件
      - name: 保存日志和生成文件
        uses: actions/upload-artifact@v4
        with:
          name: iptv-results
          path: |
            *.txt
            config/*.txt
            config/*.json
            地方频道/*.txt
            iptv_script.log
          retention-days: 7
          if-no-files-found: warn
          compression-level: 6
        if: always()

      # 步骤 13：检查文件更改
      - name: 检查文件更改
        id: check_changes
        run: |
          git add .
          if git diff --staged --quiet; then
            echo "没有文件更改"
            echo "has_changes=false" >> $GITHUB_OUTPUT
          else
            echo "检测到文件更改"
            echo "has_changes=true" >> $GITHUB_OUTPUT
          fi
        shell: bash

      # 步骤 14：检查合并冲突
      - name: 检查合并冲突
        if: steps.check_changes.outputs.has_changes == 'true'
        run: |
          git fetch origin
          git diff --name-only --diff-filter=U > conflicts.txt
          if [ -s conflicts.txt ]; then
            echo "错误：检测到合并冲突，以下文件有冲突："
            cat conflicts.txt
            exit 1
          fi
        shell: bash

      # 步骤 15：提交更改
      - name: 提交更改
        if: steps.check_changes.outputs.has_changes == 'true'
        run: |
          git config --global user.email "actions@github.com"
          git config --global user.name "GitHub Actions"
          git commit -m "更新 IPTV 频道列表 ($(date -u +'%Y-%m-%d %H:%M UTC'))"

      # 步骤 16：推送更改
      - name: 推送更改
        if: steps.check_changes.outputs.has_changes == 'true'
        run: |
          git fetch origin
          git rebase origin/main || {
            echo "Rebase 失败，尝试合并"
            git rebase --abort
            git merge origin/main --no-edit
            git push origin main
          }
        env:
          GITHUB_TOKEN: ${{ secrets.BOT }}

      # 步骤 17：发送通知
      - name: 发送通知
        if: always()
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.BOT }}
          script: |
            const fs = require('fs');
            const logContent = fs.existsSync('iptv_script.log') ? fs.readFileSync('iptv_script.log', 'utf8').slice(-5000) : '无日志';
            const status = '${{ job.status }}';
            const message = `IPTV 频道更新工作流完成\n状态: ${status}\n日志摘要:\n${logContent}`;
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: 1,
              body: message
            });
