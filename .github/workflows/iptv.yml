name: IPTV 250724

on:
  workflow_dispatch: # 允许手动触发
  schedule:
    - cron: '0 */168 * * *' # 每周运行一次

jobs:
  split-urls:
    runs-on: ubuntu-latest
    outputs:
      splits: ${{ steps.split.outputs.splits }}
    steps:
      - name: 检出代码
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.TOKEN }}

      - name: 检查 BOT secret
        run: |
          if [ -z "${{ secrets.TOKEN }}" ]; then
            echo "错误：未设置 BOT secret，请在 GitHub Secrets 中配置"
            exit 1
          fi
        shell: bash

      - name: 分割 urls.txt
        id: split
        run: |
          mkdir -p temp_urls
          split -l 100 config/urls.txt temp_urls/urls_part_ # 每100行分割一个文件
          echo "splits=$(ls temp_urls/urls_part_* | wc -l)" >> $GITHUB_OUTPUT
          for file in temp_urls/urls_part_*; do
            echo "Processing $file"
            mv $file $file.txt # 确保文件以 .txt 结尾
          done
        shell: bash

      - name: 上传分割文件
        uses: actions/upload-artifact@v4
        with:
          name: url-splits
          path: temp_urls/urls_part_*.txt
          retention-days: 7

  process-channels:
    needs: split-urls
    runs-on: ubuntu-latest
    timeout-minutes: 360
    permissions:
      contents: write
    strategy:
      matrix:
        split: ${{ fromJson(needs.split-urls.outputs.splits) }}
    steps:
      - name: 检出代码
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.TOKEN }}

      - name: 下载分割的 URL 文件
        uses: actions/download-artifact@v4
        with:
          name: url-splits
          path: temp_urls

      - name: 设置 Python 环境
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'

      - name: 安装 Python 依赖
        run: |
          pip install requests aiohttp beautifulsoup4 tenacity psutil
          pip install pyyaml requests tenacity
          pip install dnspython
          pip install requests pyyaml dnspython aiohttp tqdm
          pip install aiofiles
          pip install cachetools

      - name: 设置时区
        run: sudo timedatectl set-timezone 'Asia/Shanghai'

      - name: 安装 FFmpeg
        run: |
          sudo apt-get update
          sudo apt-get install -y ffmpeg

      - name: 验证 ffprobe
        run: |
          if command -v ffprobe >/dev/null 2>&1; then
            echo "ffprobe 已找到并可用！版本信息如下："
            ffprobe -version
          else
            echo "错误：ffprobe 未找到或无法执行！请检查上一步的 FFmpeg 安装日志。"
            exit 1
          fi

      - name: 运行 IPTV 爬取脚本
        env:
          BOT: ${{ secrets.TOKEN }}
        run: |
          mv temp_urls/urls_part_${{ matrix.split }}.txt config/urls.txt
          python tv3.py

      - name: 保存分片结果
        uses: actions/upload-artifact@v4
        with:
          name: iptv-results-${{ matrix.split }}
          path: |
            *.txt
            temp_channels/
            config/*.txt
            config/*.json
            iptv_crawler.log
          retention-days: 7
          if-no-files-found: warn

  merge-results:
    needs: process-channels
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: 检出代码
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.TOKEN }}

      - name: 下载所有分片结果
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: 合并分片结果
        run: |
          mkdir -p temp_channels config
          # 合并所有 iptv_list.txt 和 uncategorized_iptv.txt
          cat artifacts/iptv-results-*/iptv_list.txt > iptv_list.txt
          cat artifacts/iptv-results-*/config/uncategorized_iptv.txt > config/uncategorized_iptv.txt
          # 合并 temp_channels 下的分类文件
          for file in artifacts/iptv-results-*/temp_channels/*_iptv.txt; do
            if [ -f "$file" ]; then
              cat "$file" >> temp_channels/$(basename "$file")
            fi
          done
          # 合并 url_states.json
          python -c "
          import json
          import os
          merged_states = {}
          for file in os.listdir('artifacts'):
              if 'iptv-results-' in file:
                  state_file = os.path.join('artifacts', file, 'config', 'url_states.json')
                  if os.path.exists(state_file):
                      with open(state_file, 'r', encoding='utf-8') as f:
                          states = json.load(f)
                          merged_states.update(states)
          with open('config/url_states.json', 'w', encoding='utf-8') as f:
              json.dump(merged_states, f, indent=4)
          "

      - name: 再次运行脚本以合并和清理
        env:
          BOT: ${{ secrets.TOKEN }}
        run: python tv3.py

      - name: 保存最终结果
        uses: actions/upload-artifact@v4
        with:
          name: final-iptv-results
          path: |
            *.txt
            temp_channels/
            config/*.txt
            config/*.json
            iptv_crawler.log
          retention-days: 7

      - name: 检查文件更改
        id: check_changes
        run: |
          git add .
          if git diff --staged --quiet; then
            echo "没有文件更改"
            echo "has_changes=false" >> $GITHUB_OUTPUT
          else
            echo "检测到文件更改"
            echo "has_changes=true" >> $GITHUB_OUTPUT
          fi

      - name: 提交更改
        if: steps.check_changes.outputs.has_changes == 'true'
        run: |
          git config --global user.email "actions@github.com"
          git config --global user.name "GitHub Actions"
          git commit --allow-empty -m "更新 IPTV 频道列表 ($(date +'%Y-%m-%d %H:%M'))"

      - name: 推送更改
        if: steps.check_changes.outputs.has_changes == 'true'
        run: |
          git fetch origin main
          git merge origin/main -m "Merge remote changes before pushing" || (echo "错误：检测到合并冲突，请手动解决或检查日志" && exit 1)
          git push origin main
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN }}

      - name: 发送运行结果通知
        run: |
          echo "IPTV 频道更新工作流完成，状态: ${{ job.status }}"
          echo "请检查 artifact 中的 iptv_crawler.log 以获取详细信息"
