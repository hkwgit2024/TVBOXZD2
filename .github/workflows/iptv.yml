name: IPTV 频道更新

on:
  workflow_dispatch:
  schedule:
    - cron: '0 */168 * * *'  # 每周运行一次（168小时 = 7天）

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 360
    permissions:
      contents: write

    steps:
      - name: 检查 BOT secret 和环境变量
        run: |
          if [ -z "${{ secrets.BOT }}" ]; then
            echo "错误：未设置 BOT secret，请在 GitHub Secrets 中配置"
            exit 1
          fi
          if [ -z "${{ vars.REPO_OWNER }}" ]; then
            echo "错误：未设置 REPO_OWNER 变量，请在 GitHub Variables 中配置"
            exit 1
          fi
          if [ -z "${{ vars.REPO_NAME }}" ]; then
            echo "错误：未设置 REPO_NAME 变量，请在 GitHub Variables 中配置"
            exit 1
          fi
          if [ -z "${{ vars.CONFIG_PATH }}" ]; then
            echo "错误：未设置 CONFIG_PATH 变量，请在 GitHub Variables 中配置"
            exit 1
          fi
          if [ -z "${{ vars.URLS_PATH }}" ]; then
            echo "错误：未设置 URLS_PATH 变量，请在 GitHub Variables 中配置"
            exit 1
          fi
          if [ -z "${{ vars.URL_STATES_PATH }}" ]; then
            echo "错误：未设置 URL_STATES_PATH 变量，请在 GitHub Variables 中配置"
            exit 1
          fi
        shell: bash

      - name: 检出代码
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.BOT }}

      - name: 设置 Python 环境
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'

      - name: 安装 Python 依赖
        run: |
          pip install requests pyyaml aiohttp beautifulsoup4 tenacity psutil dnspython tqdm aiofiles
        shell: bash

      - name: 设置时区
        run: sudo timedatectl set-timezone 'Asia/Shanghai'

      - name: 安装 FFmpeg
        run: |
          sudo apt-get update
          sudo apt-get install -y ffmpeg

      - name: 验证 ffprobe
        run: |
          if command -v ffprobe >/dev/null 2>&1; then
            echo "ffprobe 已找到并可用！版本信息如下："
            ffprobe -version
          else
            echo "错误：ffprobe 未找到或无法执行！请检查 FFmpeg 安装日志。"
            exit 1
          fi
        shell: bash

      - name: 运行 IPTV 爬取脚本
        env:
          BOT: ${{ secrets.BOT }}
          REPO_OWNER: ${{ vars.REPO_OWNER }}
          REPO_NAME: ${{ vars.REPO_NAME }}
          CONFIG_PATH: ${{ vars.CONFIG_PATH }}
          URLS_PATH: ${{ vars.URLS_PATH }}
          URL_STATES_PATH: ${{ vars.URL_STATES_PATH }}
        run: |
          python ${{ github.workspace }}/tv.py 2>&1 | tee script_output.log
          if [ -f iptv_crawler.log ]; then
            echo "日志文件 iptv_crawler.log 已生成，内容如下："
            cat iptv_crawler.log
          else
            echo "警告：未找到 iptv_crawler.log"
          fi
        shell: bash

      - name: 保存日志和生成文件
        uses: actions/upload-artifact@v4
        with:
          name: iptv-results
          path: |
            *.txt
            config/*.txt
            地方频道/*.txt
            iptv_crawler.log
            script_output.log
          retention-days: 7
          if-no-files-found: warn
          compression-level: 6
          overwrite: false
          include-hidden-files: false
        if: always()

      - name: 检查文件更改
        id: check_changes
        run: |
          git add .
          if git diff --staged --quiet; then
            echo "没有文件更改"
            echo "has_changes=false" >> $GITHUB_OUTPUT
          else
            echo "检测到文件更改"
            echo "has_changes=true" >> $GITHUB_OUTPUT
          fi
        shell: bash

      - name: 提交更改
        if: steps.check_changes.outputs.has_changes == 'true'
        run: |
          git config --global user.email "actions@github.com"
          git config --global user.name "GitHub Actions"
          git commit --allow-empty -m "更新 IPTV 频道列表 ($(date +'%Y-%m-%d %H:%M'))"
        shell: bash

      - name: 推送更改
        if: steps.check_changes.outputs.has_changes == 'true'
        run: |
          for attempt in {1..3}; do
            git fetch origin
            git rebase origin/main || (git rebase --abort && git pull origin main --no-rebase)
            if git push origin main; then
              echo "推送成功"
              break
            else
              echo "推送失败，尝试 $attempt/3"
              sleep 5
            fi
          done
          if [ $attempt -eq 3 ]; then
            echo "错误：推送失败，请检查日志"
            exit 1
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.BOT }}
        shell: bash

      - name: 发送运行结果通知
        run: |
          echo "IPTV 频道更新工作流完成，状态: ${{ job.status }}"
          echo "请检查 artifact 中的 iptv_crawler.log 和 script_output.log 以获取详细信息"
        shell: bash
