# 工作流名称
name: IPTV 250724

# 触发条件
on:
  workflow_dispatch:  # 允许手动触发工作流
  schedule:
    - cron: '0 */168 * * *'  # 每周运行一次（每168小时）

# 工作流任务
jobs:
  build:
    runs-on: ubuntu-latest  # 使用最新的 Ubuntu 环境
    timeout-minutes: 360  # 设置 6 小时超时
    permissions:
      contents: write  # 授予写入权限，用于提交和推送更改

    steps:
      # 步骤 1：检查 BOT secret
      - name: 检查 BOT secret
        run: |
          if [ -z "${{ secrets.BOT }}" ]; then
            echo "错误：未设置 BOT secret，请在 GitHub Secrets 中配置"
            exit 1
          fi
        shell: bash

      # 步骤 2：检出代码
      - name: 检出代码
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # 获取完整提交历史，便于 rebase
          token: ${{ secrets.BOT }}  # 使用 BOT secret 进行认证

      # 步骤 3：设置 Python 环境
      - name: 设置 Python 环境
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'  # 使用 Python 3.12
          cache: 'pip'  # 缓存 pip 依赖以加速安装

      # 步骤 4：安装 Python 依赖
      - name: 安装 Python 依赖
        run: |
          pip install requests aiohttp beautifulsoup4 psutil
          pip install pyyaml
          pip install dnspython
          pip install aiofiles
          pip install cachetools  # 缓存依赖
        shell: bash

      # 步骤 5：设置时区
      - name: 设置时区
        run: sudo timedatectl set-timezone 'Asia/Shanghai'
        shell: bash

      # 步骤 6：安装 FFmpeg（用于 ffprobe）
      - name: 安装 FFmpeg
        run: |
          sudo apt-get update
          sudo apt-get install -y ffmpeg
        shell: bash

      # 步骤 7：验证 ffprobe 是否可用
      - name: 验证 ffprobe
        run: |
          if command -v ffprobe >/dev/null 2>&1; then
            echo "ffprobe 已找到并可用！版本信息如下："
            ffprobe -version
          else
            echo "错误：ffprobe 未找到或无法执行！请检查上一步的 FFmpeg 安装日志。"
            exit 1
          fi
        shell: bash

      # 步骤 8：运行 IPTV 爬取脚本
      - name: 运行 IPTV 爬取脚本
        env:
          BOT: ${{ secrets.BOT }}  # 设置环境变量 BOT
        run: python tv.py
        shell: bash

      # 步骤 9：保存日志和生成文件
      - name: 保存日志和生成文件
        uses: actions/upload-artifact@v4
        with:
          name: iptv-results  # 工件名称
          path: |
            iptv_list.txt    
            uncategorized_iptv.txt  # 保留未分类文件
            temp_channels/    
            config/*.txt      
            config/*.json     
            logs/iptv.log  # 日志文件路径
          retention-days: 7  # 工件保留 7 天
          if-no-files-found: warn  # 如果没有找到文件，发出警告
          compression-level: 6  # 压缩级别
          overwrite: false  # 不覆盖现有工件
          include-hidden-files: false  # 不包含隐藏文件
        if: always()  # 无论成功或失败都执行

      # 步骤 10：检查文件更改
      - name: 检查文件更改
        id: check_changes
        run: |
          git add .
          if git diff --staged --quiet; then
            echo "没有文件更改"
            echo "has_changes=false" >> $GITHUB_OUTPUT
          else
            echo "检测到文件更改"
            echo "has_changes=true" >> $GITHUB_OUTPUT
          fi
        shell: bash

      # 步骤 11：提交更改
      - name: 提交更改
        if: steps.check_changes.outputs.has_changes == 'true'
        run: |
          git config --global user.email "actions@github.com"
          git config --global user.name "GitHub Actions"
          git commit --allow-empty -m "更新 IPTV 频道列表 ($(date +'%Y-%m-%d %H:%M'))"
        shell: bash

      # 步骤 12：推送更改
      - name: 推送更改
        if: steps.check_changes.outputs.has_changes == 'true'
        run: |
          git fetch origin
          git rebase origin/main || (git rebase --abort && git pull origin main --no-rebase)
          git push origin main
        env:
          GITHUB_TOKEN: ${{ secrets.BOT }}
        shell: bash
