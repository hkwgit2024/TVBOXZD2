name: vt # 工作流的名称，会在 GitHub Actions 页面显示

on:
  workflow_dispatch: # 允许你通过 GitHub 网页界面手动触发此工作流
  schedule:
    # cron 表达式定义了自动运行的时间。
    # '0 */8 * * *' 表示每天的 0点、8点、16点（UTC 时间）运行一次。
    # 如果你需要调整，请注意时区。
    - cron: '0 */8 * * *' 

jobs:
  build:
    runs-on: ubuntu-latest # 指定工作流运行在最新的 Ubuntu 虚拟机上
    permissions:
      contents: write # 授予此工作流写入仓库内容的权限，这对于自动提交和推送是必需的

    steps:
      - name: Checkout code # 步骤：检出你的代码
        uses: actions/checkout@v4 # 使用官方的 checkout action 来获取仓库代码

      - name: Set up Python # 步骤：设置 Python 环境
        uses: actions/setup-python@v5 # 使用官方的 setup-python action
        with:
          python-version: 3.12 # 指定安装 Python 3.12 版本

      - name: Install dependencies # 步骤：安装 Python 依赖库
        run: | # 执行多行 shell 命令
          python -m pip install --upgrade pip # 升级 pip 工具
          # 安装你的 Python 脚本可能需要的库
          pip install requests beautifulsoup4 tenacity 

      - name: Install FFmpeg (includes ffprobe) # 步骤：安装 FFmpeg（用于处理媒体流）
        run: |
          sudo apt-get update # 更新系统包列表
          sudo apt-get install -y ffmpeg # 安装 FFmpeg 及其相关工具（如 ffprobe）

      - name: Run main script # 步骤：运行你的主要 Python 脚本
        # 如果你的 tv.py 脚本不需要任何环境变量，可以直接删除 env: 这一行。
        # 如果需要，请在下面添加，并注意缩进。
        # 例如：
        # env:
        #   MY_VARIABLE: "some_value"
        run: python ${{ github.workspace }}/tv.py # 执行位于仓库根目录的 tv.py 脚本

      - name: Commit changes # 步骤：提交并推送所有更改
        run: |
          # 配置 Git 用户信息，用于显示提交者
          git config --global user.email "actions@github.com" 
          git config --global user.name "GitHub Actions"
          
          git add . # 将所有新文件和修改过的文件添加到 Git 暂存区
          
          # 尝试创建 Git 提交。如果没有任何文件更改，'git commit' 会失败，
          # '|| echo "No changes to commit"' 会捕获错误并打印一条消息，使步骤不会中断。
          git commit -m "Update IPTV channel list ($(date +'%Y-%m-%d %H:%M'))" || echo "No changes to commit"
          
          # 解决 Git 推送冲突的关键步骤：
          # 在推送之前，先从远程 'origin' 的 'main' 分支拉取最新的更改。
          # '--rebase' 选项会把你的本地提交放在远程最新提交的上方，保持提交历史干净。
          git pull origin main --rebase
          
          git push # 将本地更改推送到远程仓库的 'main' 分支
          shell: /usr/bin/bash -e {0} # 指定此步骤使用 bash shell
