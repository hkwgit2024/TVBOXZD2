name: IPTV 频道更新

# 触发条件
on:
  workflow_dispatch:  # 允许手动触发
  schedule:
    - cron: '0 */8 * * *'  # 每天 UTC 时间 0:00、8:00、16:00

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 360  # 设置 6 小时超时
    permissions:
      contents: write  # 授予写入权限，用于提交和推送更改

    steps:
      # 步骤1：检查 BOT secret
      - name: 检查 BOT secret
        run: |
          if [ -z "${{ secrets.BOT }}" ]; then
            echo "错误：未设置 BOT secret，请在 GitHub Secrets 中配置"
            exit 1
          fi
        shell: bash

      # 步骤2：检出代码
      - name: 检出代码
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # 获取完整提交历史，便于 rebase
          token: ${{ secrets.BOT }}  # 使用 BOT secret 进行认证

      # 步骤3：设置 Python 环境
      - name: 设置 Python 环境
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'  # 调整为新脚本测试的版本
          cache: 'pip'  # 缓存 pip 依赖

      # 步骤4：缓存状态文件
      - name: 缓存状态文件
        uses: actions/cache@v4
        with:
          path: |
            config/url_states.json
            config/channel_cache.json
            config/keyword_stats.json
          key: ${{ runner.os }}-cache-${{ github.run_id }}
          restore-keys: |
            ${{ runner.os }}-cache-

      # 步骤5：安装 Python 依赖
      - name: 安装 Python 依赖
        run: |
          python -m pip install --upgrade pip
          pip install requests pyyaml aiohttp psutil tenacity

      # 步骤6：安装 FFmpeg (用于 ffprobe)
      - name: 安装 FFmpeg
        run: |
          sudo apt-get update
          sudo apt-get install -y ffmpeg

      # 步骤7：验证 ffprobe 是否可用
      - name: 验证 ffprobe
        run: |
          if command -v ffprobe >/dev/null 2>&1; then
            echo "ffprobe 已找到并可用！版本信息如下："
            ffprobe -version
          else
            echo "错误：ffprobe 未找到或无法执行！"
            exit 1
          fi

      # 步骤8：运行 IPTV 爬取脚本
      - name: 运行 IPTV 爬取脚本
        env:
          BOT: ${{ secrets.BOT }}
          REPO_OWNER: ${{ vars.REPO_OWNER }}
          REPO_NAME: ${{ vars.REPO_NAME }}
          CONFIG_PATH: ${{ vars.CONFIG_PATH }}
          URLS_PATH: ${{ vars.URLS_PATH }}
          URL_STATES_PATH: ${{ vars.URL_STATES_PATH }}
          NOTIFICATION_WEBHOOK: ${{ secrets.NOTIFICATION_WEBHOOK }}  # 可选 Webhook
        run: python ${{ github.workspace }}/optimized_iptv_script_with_cache.py

      # 步骤9：保存生成文件
      - name: 保存生成文件
        uses: actions/upload-artifact@v4
        with:
          name: iptv-results
          path: |
            output/*.txt
            地方频道/*.txt
            config/*.json
            unmatched_channels.txt
            iptv_list.txt
          retention-days: 7
          if-no-files-found: warn
          compression-level: 6
          overwrite: false
          include-hidden-files: false
        if: always()

      # 步骤10：检查文件更改
      - name: 检查文件更改
        id: check_changes
        run: |
          git add output/*.txt config/*.json unmatched_channels.txt iptv_list.txt 地方频道/*.txt
          if git diff --staged --quiet; then
            echo "没有文件更改"
            echo "has_changes=false" >> $GITHUB_OUTPUT
          else
            echo "检测到文件更改"
            echo "has_changes=true" >> $GITHUB_OUTPUT
          fi
        shell: bash

      # 步骤11：提交更改
      - name: 提交更改
        if: steps.check_changes.outputs.has_changes == 'true'
        run: |
          git config --global user.email "actions@github.com"
          git config --global user.name "GitHub Actions"
          git commit --allow-empty -m "更新 IPTV 频道列表和缓存文件 ($(date +'%Y-%m-%d %H:%M'))"

      # 步骤12：推送更改
      - name: 推送更改
        if: steps.check_changes.outputs.has_changes == 'true'
        run: |
          git fetch origin
          git rebase origin/main || (git rebase --abort && git pull origin main --no-rebase)
          git push origin main
        env:
          GITHUB_TOKEN: ${{ secrets.BOT }}

      # 步骤13：发送运行结果通知
      - name: 发送运行结果通知
        if: always()
        env:
          NOTIFICATION_WEBHOOK: ${{ secrets.NOTIFICATION_WEBHOOK }}
        run: |
          STATUS="${{ job.status }}"
          MESSAGE="IPTV 频道更新工作流完成，状态: $STATUS\n查看日志: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          echo "$MESSAGE"
          if [ -n "$NOTIFICATION_WEBHOOK" ]; then
            curl -H "Content-Type: application/json" -X POST -d "{\"content\":\"$MESSAGE\"}" "$NOTIFICATION_WEBHOOK"
          fi
