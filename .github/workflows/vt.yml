# 工作流名称，在 GitHub Actions 页面显示
name: IPTV 频道更新

# 触发条件
on:
  workflow_dispatch:  # 允许手动触发
  schedule:
    - cron: '0 */8 * * *'  # 每天 UTC 时间 0:00、8:00、16:00

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 360  # 设置 6 小时超时
    permissions:
      contents: write # 授予写入权限，用于提交和推送更改

    steps:
      # 步骤1：检查 BOT secret
      - name: 检查 BOT secret
        run: |
          if [ -z "${{ secrets.BOT }}" ]; then
            echo "错误：未设置 BOT secret，请在 GitHub Secrets 中配置"
            exit 1
          fi
        shell: bash

      # 步骤2：检出代码
      - name: 检出代码
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # 获取完整提交历史，便于 rebase
          token: ${{ secrets.BOT }}  # 使用 BOT secret 进行认证

      # 步骤3：设置 Python 环境
      - name: 设置 Python 环境
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'  # 缓存 pip 依赖

      # 步骤4：安装 Python 依赖
      - name: 安装 Python 依赖
        run: |
          pip install requests aiohttp beautifulsoup4 tenacity psutil
        continue-on-error: true # 即使安装失败也继续执行，但建议关注日志

      # 步骤5：安装 FFmpeg (用于 ffprobe)
      - name: 安装 FFmpeg
        run: |
          sudo apt-get update
          sudo apt-get install -y ffmpeg
        continue-on-error: true # 即使安装失败也继续执行，但建议关注日志

# 步骤6：运行 IPTV 爬取脚本
      - name: 运行 IPTV 爬取脚本
        run: python ${{ github.workspace }}/tv.py
        # 暂时移除 continue-on-error: true 和日志重定向

      # 步骤7：保存日志和生成文件
      - name: 保存日志和生成文件
        uses: actions/upload-artifact@v4
        with:
          name: iptv-results
          path: |
            *.txt
            config/*.txt
            地方频道/*.txt
            iptv_crawler.log
            iptv_crawler_output.log # 确保这里的文件名和上面重定向的一致
          retention-days: 7 # Artifact 保留天数
          if-no-files-found: warn # 如果没有找到指定文件，发出警告而不是失败
          compression-level: 6 # 压缩级别
          overwrite: false # 不覆盖现有 artifact
          include-hidden-files: false # 不包含隐藏文件
        if: always() # 无论上一步成功失败都执行，确保日志被上传

      # 步骤8：检查文件更改
      - name: 检查文件更改
        id: check_changes
        run: |
          git add .
          if git diff --staged --quiet; then
            echo "没有文件更改"
            echo "has_changes=false" >> $GITHUB_OUTPUT
          else
            echo "检测到文件更改"
            echo "has_changes=true" >> $GITHUB_OUTPUT
          fi
        shell: bash

      # 步骤9：提交更改
      - name: 提交更改
        if: steps.check_changes.outputs.has_changes == 'true'
        run: |
          git config --global user.email "actions@github.com"
          git config --global user.name "GitHub Actions"
          git commit --allow-empty -m "更新 IPTV 频道列表 ($(date +'%Y-%m-%d %H:%M'))"
        continue-on-error: true # 即使提交失败也继续执行

      # 步骤10：推送更改
      - name: 推送更改
        if: steps.check_changes.outputs.has_changes == 'true'
        run: |
          git fetch origin
          git rebase origin/main || (git rebase --abort && git pull origin main --no-rebase) # 尝试 rebase，失败则 pull
          git push origin main
        env:
          GITHUB_TOKEN: ${{ secrets.BOT }} # 使用 BOT secret 进行认证
        continue-on-error: true # 即使推送失败也继续执行

      # 步骤11：发送运行结果通知
      - name: 发送运行结果通知
        run: | # 使用 | 启用多行字符串，将其作为一个整体脚本执行
          echo "IPTV 频道更新工作流完成，状态: ${{ job.status }}"
          echo "请检查 artifact 中的 iptv_crawler.log 和 iptv_crawler_output.log 以获取详细信息"
