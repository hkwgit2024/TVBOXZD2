name: Test and Update Proxy Nodes

on:
  push:
    branches:
      - main
    paths:
      - 'test_nodes.py'
      - '.github/workflows/main.yml'
  schedule:
    - cron: '0 20 * * *'  # UTC 20:00 daily
  workflow_dispatch:

jobs:
  test_and_update_nodes:
    runs-on: ubuntu-latest
    timeout-minutes: 60  # 设置工作流超时时间，防止长时间挂起

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # 获取完整历史以支持 git 提交

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'

      - name: Verify Python version
        run: |
          python --version
          if [[ $(python --version) != *"3.9"* ]]; then
            echo "::error::Python version is not 3.9"
            exit 1
          fi

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y unzip jq net-tools  # 添加 net-tools 用于端口检查
        continue-on-error: false

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install httpx[socks]==0.27.2 aiodns==3.2.0 aiofiles==24.1.0 psutil==6.1.0
          pip show httpx socksio aiodns aiofiles psutil > dependency_versions.txt
          if [ $? -ne 0 ]; then
            echo "::error::Failed to install Python dependencies"
            exit 1
          fi
        continue-on-error: false

      - name: Configure DNS
        run: |
          echo "nameserver 8.8.8.8" | sudo tee /etc/resolv.conf
          echo "nameserver 1.1.1.1" | sudo tee -a /etc/resolv.conf
          cat /etc/resolv.conf
        continue-on-error: false

      - name: Check port availability
        run: |
          if netstat -tuln | grep -q ":1080"; then
            echo "::error::Port 1080 is already in use"
            exit 1
          fi
          echo "Port 1080 is available"

      - name: Download Xray Core and Geo Data
        run: |
          XRAY_VERSION="1.8.24"
          XRAY_ZIP="Xray-linux-64.zip"
          XRAY_URL="https://github.com/XTLS/Xray-core/releases/download/v${XRAY_VERSION}/${XRAY_ZIP}"
          GEOIP_URL="https://github.com/MetaCubeX/meta-rules-dat/releases/download/latest/geoip.dat"
          GEOSITE_URL="https://github.com/MetaCubeX/meta-rules-dat/releases/download/latest/geosite.dat"

          mkdir -p data

          # Download and verify Xray
          for attempt in {1..3}; do
            if curl -L -o xray.zip "${XRAY_URL}" --fail; then
              break
            fi
            echo "Retry ${attempt}/3: Failed to download Xray from ${XRAY_URL}"
            sleep 2
          done
          if [ ! -s xray.zip ]; then
            echo "::error::Failed to download Xray zip"
            exit 1
          fi
          unzip -o xray.zip xray -d .
          if [ ! -f ./xray ]; then
            echo "::error::Xray executable not found"
            exit 1
          fi
          chmod +x ./xray
          echo "XRAY_PATH=$(pwd)/xray" >> $GITHUB_ENV
          echo "XRAY_LOCATION_ASSET=$(pwd)/data" >> $GITHUB_ENV

          # Download geoip.dat
          for attempt in {1..3}; do
            if curl -L -o data/geoip.dat "${GEOIP_URL}" --fail; then
              break
            fi
            echo "Retry ${attempt}/3: Failed to download geoip.dat from ${GEOIP_URL}"
            sleep 2
          done
          if [ ! -s data/geoip.dat ]; then
            echo "::error::Failed to download geoip.dat"
            exit 1
          fi
          chmod 644 data/geoip.dat

          # Download geosite.dat
          for attempt in {1..3}; do
            if curl -L -o data/geosite.dat "${GEOSITE_URL}" --fail; then
              break
            fi
            echo "Retry ${attempt}/3: Failed to download geosite.dat from ${GEOSITE_URL}"
            sleep 2
          done
          if [ ! -s data/geosite.dat ]; then
            echo "::error::Failed to download geosite.dat"
            exit 1
          fi
          chmod 644 data/geosite.dat
        continue-on-error: false

      - name: Run Node Tester Script
        id: test_script
        run: |
          export TEST_TIMEOUT=15
          export LOG_LEVEL=DEBUG
          export XRAY_GEOIP_PATH=$(pwd)/data/geoip.dat
          export XRAY_GEOSITE_PATH=$(pwd)/data/geosite.dat
          export BATCH_SIZE=5
          python test_nodes.py | tee test_output.log
          # 从 test_output.log 中提取最终成功节点数
          SUCCESS_COUNT=$(grep "最终成功节点数:" test_output.log | awk '{print $NF}' || echo "0")
          echo "successful_nodes_count=${SUCCESS_COUNT}" >> $GITHUB_OUTPUT
        continue-on-error: false # 如果脚本自身崩溃，此步骤会失败

      # 移除了 'Upload test logs and dependencies' 步骤以取消工作流产物

      - name: Commit and Push changes
        # 只要 'Run Node Tester Script' 步骤成功完成（即脚本没有崩溃），就执行提交
        if: steps.test_script.outcomes.success
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          # 添加所有需要被更新到 Git 仓库的文件
          # 确保这些文件确实会被 test_nodes.py 脚本生成或修改
          git add data/sub.txt data/history_results.json data/dns_cache.json data/success_count.txt
          # 如果你希望 test_output.log 和 dependency_versions.txt 也提交到 Git 仓库，请取消下面两行的注释
          # git add test_output.log
          # git add dependency_versions.txt

          echo "--- Content of data/sub.txt (after git add) ---"
          cat data/sub.txt || echo "data/sub.txt not found or empty."
          echo "-------------------------------------------------"
          
          echo "--- Content of data/history_results.json (after git add) ---"
          cat data/history_results.json || echo "data/history_results.json not found or empty."
          echo "------------------------------------------------------------"
          
          echo "--- Content of data/dns_cache.json (after git add) ---"
          cat data/dns_cache.json || echo "data/dns_cache.json not found or empty."
          echo "------------------------------------------------------"

          echo "--- Content of data/success_count.txt (after git add) ---"
          cat data/success_count.txt || echo "data/success_count.txt not found or empty."
          echo "---------------------------------------------------------"
          
          if ! git diff --quiet --cached; then
            # 如果有文件被修改或添加，则进行提交
            git commit -m "Update proxy nodes (Successful: ${{ steps.test_script.outputs.successful_nodes_count }})"
            git push origin main
          else
            echo "No changes to commit. Files in data/ might not have changed or no successful nodes found."
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 

      - name: Notify on no successful nodes
        # 此步骤仍然会在没有成功节点时发出警告，但不会阻止文件更新到目录
        # 如果你不需要这个警告，可以删除此步骤
        if: steps.test_script.outcomes.success && steps.test_script.outputs.successful_nodes_count == '0'
        run: |
          echo "::warning::Node tester script ran successfully, but no successful nodes were found. Files in data/ directory have been updated and committed."
