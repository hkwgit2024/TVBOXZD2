name: Test and Update Proxy Nodes

on:
  # 在 main 分支有推送时触发
  push:
    branches:
      - main
    paths:
      - 'test_nodes.py' # 仅当脚本文件本身有更改时运行
      - '.github/workflows/main.yml' # 仅当工作流文件有更改时运行

  # 每天固定时间运行 (例如，北京时间早上 4 点，UTC 20:00)
  schedule:
    - cron: '0 20 * * *' # UTC 20:00 对应北京时间次日 04:00

  # 允许手动触发工作流
  workflow_dispatch:

jobs:
  test_and_update_nodes:
    runs-on: ubuntu-latest # 在最新的 Ubuntu 环境上运行

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4 # 检出你的代码库

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9' # 指定 Python 版本，建议 3.8+

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install httpx aiodns aiofiles psutil

      - name: Download Xray Core
        run: |
          # 根据 GitHub Actions runner 环境选择对应的 Xray 版本
          # 这里以下载 Linux 64-bit 版本为例
          # 检查最新的 release 页面获取准确的版本号和下载链接
          # 推荐使用稳定版本，通常是最新版本，但可以手动指定
          XRAY_VERSION="1.8.8" # 请替换为 Xray 的最新稳定版本号，例如 "1.8.8"
          XRAY_ZIP="Xray-linux-64.zip" # 对应 Linux x64
          XRAY_URL="https://github.com/XTLS/Xray-core/releases/download/v${XRAY_VERSION}/${XRAY_ZIP}"
          
          mkdir -p data # 创建数据目录
          echo "Downloading Xray from ${XRAY_URL}"
          curl -L -o xray.zip ${XRAY_URL}
          
          # 检查下载的文件是否存在且非空
          if [ ! -s xray.zip ]; then
            echo "Error: Xray zip file was not downloaded or is empty!"
            exit 1 # 退出，因为没有下载到 Xray
          fi

          echo "Unzipping Xray..."
          # 解压出 xray 可执行文件到当前目录
          # 确保解压目标是当前目录，并且文件名是 "xray" (小写)
          unzip -o xray.zip xray -d . # -o 选项表示覆盖现有文件
          
          # 再次检查解压后的文件是否存在
          if [ ! -f ./xray ]; then
            echo "Error: Xray executable not found after unzipping!"
            exit 1
          fi

          echo "Setting permissions for Xray..."
          chmod +x ./xray # 添加执行权限

          echo "Setting XRAY_PATH environment variable..."
          # 将 Xray 路径设置为环境变量，这样 Python 脚本才能找到它
          echo "XRAY_PATH=$(pwd)/xray" >> $GITHUB_ENV 
          echo "Xray setup complete."

      - name: Run Node Tester Script
        id: test_script # 为这一步添加 ID，以便后续引用其输出
        run: |
          echo "Starting Python script..."
          # 将所有输出重定向到日志文件
          # 增加超时时间以应对复杂的网络环境或节点测试
          TEST_TIMEOUT=15 # 将超时时间增加到 15 秒
          LOG_LEVEL=INFO # 生产环境可以设置为 INFO，调试时可以改为 DEBUG
          
          python test_nodes.py > test_output.log 2>&1
          
          echo "Python script finished. Output log:"
          cat test_output.log # 打印日志到控制台
          
          # 从日志中提取最终成功节点数
          SUCCESS_COUNT=$(grep "最终成功节点数:" test_output.log | awk '{print $NF}' || echo "0")
          echo "Detected successful nodes count: ${SUCCESS_COUNT}"
          echo "successful_nodes_count=${SUCCESS_COUNT}" >> $GITHUB_OUTPUT
        env:
          TEST_TIMEOUT: 15 # 通过环境变量覆盖脚本中的默认值
          LOG_LEVEL: INFO # 通过环境变量覆盖脚本中的默认值

      - name: Commit and Push if changed
        # 仅当有成功节点 (大于0) 或 sub.txt 文件发生变化时才尝试提交
        # 即使 successful_nodes_count 为 0，如果 sub.txt 内容发生了变化 (例如从有节点到无节点)，也应该提交
        if: ${{ steps.test_script.outputs.successful_nodes_count != '0' || success() }} 
        run: |
          echo "Configuring Git user..."
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          echo "Adding data files to Git..."
          git add data/sub.txt data/history_results.json data/dns_cache.json
          
          echo "Checking for changes and committing..."
          # 检查是否有实际的文件更改，如果有，则创建提交
          if ! git diff --quiet --cached; then
            git commit -m "Update proxy nodes (Successful: ${{ steps.test_script.outputs.successful_nodes_count }})"
            echo "Pushing changes to main branch..."
            git push origin main
            echo "Commit and push complete."
          else
            echo "No changes detected in data files. Skipping commit."
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # GitHub 自动提供的 token

      - name: No successful nodes found (informational)
        if: ${{ steps.test_script.outputs.successful_nodes_count == '0' }}
        run: |
          echo "No successful nodes were found in this run. The 'sub.txt' file might be empty or contain a fallback message."
          echo "If 'sub.txt' was already empty, no commit will be made."
