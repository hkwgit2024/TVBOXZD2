name: Test and Update Proxy Nodes

on:
  push:
    branches:
      - main
    paths:
      - 'test_nodes.py'
      - '.github/workflows/main.yml'
  schedule:
    - cron: '0 20 * * *'
  workflow_dispatch:

jobs:
  test_and_update_nodes:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y unzip jq
        continue-on-error: false

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install httpx aiodns aiofiles psutil
          pip show httpx aiodns aiofiles psutil || { echo "::error::Failed to install Python dependencies"; exit 1; }
        continue-on-error: false

      - name: Download Xray Core and Geo Data
        run: |
          XRAY_VERSION="1.8.23"
          XRAY_ZIP="Xray-linux-64.zip"
          XRAY_URL="https://github.com/XTLS/Xray-core/releases/download/v${XRAY_VERSION}/${XRAY_ZIP}"

          # 使用 latest 标签下载 geoip-lite.dat 和 geosite.dat
          GEOIP_URL="https://github.com/MetaCubeX/meta-rules-dat/releases/download/latest/geoip-lite.dat"
          GEOSITE_URL="https://github.com/MetaCubeX/meta-rules-dat/releases/download/latest/geosite.dat"

          mkdir -p data

          # 下载并验证 Xray
          for attempt in {1..3}; do
            if curl -L -o xray.zip "${XRAY_URL}" --fail; then
              break
            fi
            echo "Retry ${attempt}/3: Failed to download Xray from ${XRAY_URL}"
            sleep 2
          done
          if [ ! -s xray.zip ]; then echo "::error::Failed to download Xray zip"; exit 1; fi
          unzip -o xray.zip xray -d .
          if [ ! -f ./xray ]; then echo "::error::Xray executable not found"; exit 1; fi
          chmod +x ./xray
          echo "XRAY_PATH=$(pwd)/xray" >> $GITHUB_ENV

          # 下载 geoip-lite.dat
          for attempt in {1..3}; do
            if curl -L -o data/geoip-lite.dat "${GEOIP_URL}" --fail; then
              break
            fi
            echo "Retry ${attempt}/3: Failed to download geoip-lite.dat from ${GEOIP_URL}"
            sleep 2
          done
          if [ ! -s data/geoip-lite.dat ]; then echo "::error::Failed to download geoip-lite.dat"; exit 1; fi

          # 下载 geosite.dat
          for attempt in {1..3}; do
            if curl -L -o data/geosite.dat "${GEOSITE_URL}" --fail; then
              break
            fi
            echo "Retry ${attempt}/3: Failed to download geosite.dat from ${GEOSITE_URL}"
            sleep 2
          done
          if [ ! -s data/geosite.dat ]; then echo "::error::Failed to download geosite.dat"; exit 1; fi
        continue-on-error: false

      - name: Run Node Tester Script
        id: test_script
        run: |
          export TEST_TIMEOUT=15
          export LOG_LEVEL=DEBUG
          export XRAY_GEOIP_PATH=$(pwd)/data/geoip-lite.dat
          export XRAY_GEOSITE_PATH=$(pwd)/data/geosite.dat

          python test_nodes.py | tee test_output.log
          SUCCESS_COUNT=$(grep "最终成功节点数:" test_output.log | awk '{print $NF}' || echo "0")
          echo "successful_nodes_count=${SUCCESS_COUNT}" >> $GITHUB_OUTPUT
        continue-on-error: false

      - name: Upload test logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-logs
          path: |
            test_output.log
            data/sub.txt
            data/history_results.json
            data/dns_cache.json
            data/geoip-lite.dat
            data/geosite.dat
          retention-days: 7

      - name: Commit and Push if changed
        if: steps.test_script.outcomes.success && steps.test_script.outputs.successful_nodes_count != '0'
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add data/sub.txt data/history_results.json data/dns_cache.json
          if ! git diff --quiet --cached; then
            git commit -m "Update proxy nodes (Successful: ${{ steps.test_script.outputs.successful_nodes_count }})"
            git push origin main
          else
            echo "No changes to commit"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.BOT }}

      - name: Notify on no successful nodes
        if: steps.test_script.outcomes.success && steps.test_script.outputs.successful_nodes_count == '0'
        run: |
          echo "::warning::No successful nodes found. Skipping commit."
