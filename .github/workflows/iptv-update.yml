
name: IPTV Channel Update

on:
  workflow_dispatch:  # 支持手动触发
  schedule:
    - cron: '0 0 * * 1'  # 每周一凌晨运行

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 360
    permissions:
      contents: write  # 允许写入仓库内容

    steps:
      # 步骤1：检查 BOT secret
      - name: Check BOT Secret
        run: |
          if [ -z "${{ secrets.BOT }}" ]; then
            echo "Error: BOT secret is not set. Please configure it in GitHub Secrets."
            exit 1
          fi
        shell: bash

      # 步骤2：检出代码
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.BOT }}

      # 步骤3：设置 Python 环境
      - name: Set Up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'

      # 步骤4：安装 Python 依赖
      - name: Install Python Dependencies
        run: |
          pip install requests aiohttp beautifulsoup4 tenacity psutil pyyaml dnspython aiofiles tqdm

      # 步骤5：设置时区
      - name: Set Timezone
        run: sudo timedatectl set-timezone 'Asia/Shanghai'

      # 步骤6：创建输出目录
      - name: Create Output Directories
        run: |
          mkdir -p temp_channels output config
        shell: bash

      # 步骤7：安装 FFmpeg
      - name: Install FFmpeg
        run: |
          sudo apt-get update
          sudo apt-get install -y ffmpeg

      # 步骤8：验证 ffprobe
      - name: Verify ffprobe
        run: |
          if command -v ffprobe >/dev/null 2>&1; then
            echo "ffprobe found and available! Version info:"
            ffprobe -version
          else
            echo "Error: ffprobe not found or not executable!"
            exit 1
          fi

      # 步骤9：运行 IPTV 爬取脚本
      - name: Run IPTV Script
        env:
          BOT: ${{ secrets.BOT }}
          REPO_OWNER: ${{ vars.REPO_OWNER }}
          REPO_NAME: ${{ vars.REPO_NAME }}
          CONFIG_PATH: config/config.yaml
          URLS_PATH: config/urls.txt
          URL_STATES_PATH: config/url_states.yaml
          INVALID_URLS_PATH: config/invalid_urls.txt
        run: python ${{ github.workspace }}/tv3.py

      # 步骤10：检查 uncategorized_channels.txt 是否生成
      - name: Check uncategorized_channels.txt
        run: |
          if [ -f "uncategorized_channels.txt" ]; then
            echo "uncategorized_channels.txt generated successfully"
            cat uncategorized_channels.txt
          else
            echo "Error: uncategorized_channels.txt not generated"
            exit 1
          fi
        shell: bash

      # 步骤11：检查文件更改
      - name: Check File Changes
        id: check_changes
        run: |
          git add .
          if git diff --staged --quiet; then
            echo "No file changes detected"
            echo "has_changes=false" >> $GITHUB_OUTPUT
          else
            echo "File changes detected"
            echo "has_changes=true" >> $GITHUB_OUTPUT
          fi
        shell: bash

      # 步骤12：提交更改
      - name: Commit Changes
        if: steps.check_changes.outputs.has_changes == 'true'
        run: |
          git config --global user.email "actions@github.com"
          git config --global user.name "GitHub Actions"
          git commit --allow-empty -m "Update IPTV channel list ($(date +'%Y-%m-%d %H:%M'))"

      # 步骤13：推送更改
      - name: Push Changes
        if: steps.check_changes.outputs.has_changes == 'true'
        run: |
          git fetch origin
          git rebase origin/main || (git rebase --abort && git pull origin main --no-rebase)
          git push origin main
        env:
          GITHUB_TOKEN: ${{ secrets.BOT }}

      # 步骤14：发送运行结果通知
      - name: Send Run Result Notification
        run: |
          echo "IPTV channel update workflow completed, status: ${{ job.status }}"
          echo "Check iptv_script.log in the repository for details"
