name: 优化：直接下载配置与测速优选

on:
  workflow_dispatch: # 允许手动触发
  schedule:
    - cron: '0 0 * * *' # 每天 UTC 时间午夜运行一次，你可以根据需要调整频率
  push:
    branches:
      - main # 每次推送到 main 分支时也触发，如果不需要可以删除此部分

jobs:
  automate_proxies:
    runs-on: ubuntu-latest # 在最新的 Ubuntu 虚拟机上运行

    steps:
    - name: 检出你的仓库 # 步骤 1: 克隆你自己的 GitHub 仓库代码
      uses: actions/checkout@v4

    - name: 下载 Clash 原始配置 # 步骤 2: 直接下载 qjlxg/vt 仓库中的 clash_config.yaml
      run: |
        # 使用 curl 下载原始文件内容
        # raw.githubusercontent.com 提供原始文件内容，适合直接下载
        curl -o clash_config.yaml https://raw.githubusercontent.com/qjlxg/vt/refs/heads/main/clash_config.yaml
        
        # 检查文件是否成功下载
        if [ ! -f clash_config.yaml ]; then
          echo "::error::clash_config.yaml 文件下载失败，请检查 URL 或网络。"
          exit 1
        fi
        echo "clash_config.yaml 已成功下载。"

    - name: 下载 clash-speedtest 二进制文件 # 步骤 3: 下载测速工具
      run: |
        TOOL_VERSION="v1.7.0" # 使用最新的稳定版本
        TOOL_NAME="clash-speedtest"
        OS_ARCH="Linux_x86_64" # GitHub Actions 运行器通常是 Linux x86_64
        DOWNLOAD_URL="https://github.com/faceair/${TOOL_NAME}/releases/download/${TOOL_VERSION}/${TOOL_NAME}_${OS_ARCH}.tar.gz"
        
        echo "正在从以下地址下载 ${TOOL_NAME}: ${DOWNLOAD_URL}"
        
        curl -L "${DOWNLOAD_URL}" -o "${TOOL_NAME}.tar.gz"
        tar -xzf "${TOOL_NAME}.tar.gz"
        chmod +x "${TOOL_NAME}"
        sudo mv "${TOOL_NAME}" /usr/local/bin/ # 移动到 PATH 方便调用

    - name: 对下载的配置进行测速和过滤 # 步骤 4: 使用 clash-speedtest 优选节点
      run: |
        mkdir -p output # 确保最终输出目录存在
        # 输入源是刚刚下载的 clash_config.yaml 文件
        # 输出到你的仓库的 output/speedtested_proxies.yaml
        clash-speedtest \
          -c clash_config.yaml \ # 源：使用直接下载的 clash_config.yaml
          -output output/speedtested_proxies.yaml \ # 最终优选结果输出
          -rename \                                  # 重命名节点以包含速度和地区信息
          -concurrent 20 \                           # 并发测试 20 个节点，提高效率
          -download-size 5MB \                       # 下载测试文件大小
          -upload-size 2MB \                         # 上传测试文件大小
          -timeout 5s \                              # 每个节点的测试超时时间
          -max-latency 800ms \                       # 过滤掉延迟高于 800ms 的节点
          -min-download-speed 1.0 \                  # 过滤掉下载速度低于 1.0 MB/s 的节点
          -min-upload-speed 0.5                      # 过滤掉上传速度低于 0.5 MB/s 的节点

    - name: 提交并推送优选结果 # 步骤 5: 将最终优选后的配置文件提交并推送到你的 GitHub 仓库
      run: |
        git add output/speedtested_proxies.yaml # 添加最终文件到暂存区
        git config user.name "GitHub Actions"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        git commit -m "Auto-update: Downloaded config and speedtested proxies" || echo "没有需要提交的更改" # 提交更改，如果文件无变化则不报错
        git push
