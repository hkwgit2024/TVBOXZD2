name: 更新和转换

on:
  workflow_dispatch: # 允许手动触发
  schedule:
    # 每天凌晨2点（UTC时间）运行，转换为日本时间是上午11点
    - cron: '0 2 * * *'

jobs:
  update-and-convert-nodes:
    runs-on: ubuntu-latest

    steps:
    - name: 检出仓库代码
      uses: actions/checkout@v4
      # 确保即使在旧的本地分支上，也能正确获取到最新的远程分支信息
      with:
        fetch-depth: 0 # 获取所有历史，这有助于后续的pull/rebase操作

    - name: 设置 Python 环境
      uses: actions/setup-python@v5
      with:
        python-version: '3.x' # 使用 Python 3 的最新版本

    - name: 安装依赖库
      run: |
        python -m pip install --upgrade pip
        # 安装所需库：aiohttp (用于异步请求), pyyaml (用于 YAML 解析), requests (如果未来有同步请求需求)
        pip install aiohttp pyyaml requests

    - name: 运行代理转换脚本
      run: python proxy_converter.py --sources sources.list --output data/nodes.txt --clash-output data/clash.yaml --max-concurrency 50 --timeout 20
      # 使用命令行参数来运行脚本，更灵活
      # --sources: 指定源 URL 文件
      # --output: 指定纯节点 URL 输出文件
      # --clash-output: 指定 Clash YAML 输出文件
      # --max-concurrency: 最大并发请求数
      # --timeout: 请求超时时间

    - name: 提交并推送更改
      uses: stefanzweifel/git-auto-commit-action@v5
      with:
        commit_message: "自动更新代理节点及生成 Clash 配置"
        file_pattern: |
          data/nodes.txt
          data/clash.yaml
        branch: main # 或者您的默认分支名称，例如 master
        # ==== 修复 Git 拒绝推送错误的关键行 ====
        # 在推送前尝试拉取远程分支的最新更改。
        # '--rebase --autostash' 会尝试将本地更改“重放”到远程最新提交之上，保持提交历史干净。
        # 如果你更倾向于合并提交（即创建一个新的合并提交），可以使用 '--no-ff' 或不指定参数，让其默认合并。
        # 对于自动化更新文件，rebase 通常是更好的选择，因为它避免了额外的合并提交。
        pull_options: '--rebase --autostash'
        # ======================================
