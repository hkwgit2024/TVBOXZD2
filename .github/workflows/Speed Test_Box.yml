name: Node Connectivity Test

on:
  schedule:
    - cron: '0 0 * * *'  # 每天 UTC 00:00 运行
  workflow_dispatch:  # 允许手动触发

jobs:
  test-nodes:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install system dependencies
        run: |
          sudo apt update
          sudo apt install -y dnsutils curl jq

      - name: Install Python dependencies
        run: |
          pip install requests pyyaml

      - name: Install Sing-Box
        run: |
          echo "开始安装 Sing-Box..."
          for i in {1..3}; do
            echo "尝试 $i 次获取 Sing-Box 版本..."
            RAW_RESPONSE=$(curl -s --retry 3 https://api.github.com/repos/SagerNet/sing-box/releases/latest)
            echo "原始 API 响应内容 (用于调试):"
            echo "$RAW_RESPONSE" | head -n 20
            
            SING_BOX_VERSION=$(echo "$RAW_RESPONSE" | jq -r '.tag_name')
            echo "提取到的 Sing-Box 版本: $SING_BOX_VERSION"

            if [ -n "$SING_BOX_VERSION" ]; then
              echo "成功获取到 Sing-Box 版本: $SING_BOX_VERSION"
              break
            else
              echo "重试 $i 次：未能获取 Sing-Box 版本或版本为空。等待 5 秒后重试..."
              sleep 5
            fi
          done

          [ -z "$SING_BOX_VERSION" ] && { echo "错误：多次重试后仍无法获取 Sing-Box 版本。"; exit 1; }

          SING_BOX_URL="https://github.com/SagerNet/sing-box/releases/download/${SING_BOX_VERSION}/sing-box-${SING_BOX_VERSION#v}-linux-amd64.tar.gz"
          echo "正在从 $SING_BOX_URL 下载 Sing-Box..."
          
          curl -sL --retry 3 "$SING_BOX_URL" -o sing-box.tar.gz || { echo "错误：下载 Sing-Box 失败"; exit 1; }
          
          file sing-box.tar.gz | grep -q "gzip compressed data" || { echo "错误：下载的文件不是有效的 gzip 压缩包。"; exit 1; }
          
          tar -xzf sing-box.tar.gz || { echo "错误：解压 Sing-Box 归档文件失败。"; exit 1; }
          
          SING_BOX_BINARY=$(find . -type f -name sing-box -executable) # 确保找到的是可执行文件
          [ -z "$SING_BOX_BINARY" ] && { echo "错误：在归档文件中未找到 Sing-Box 可执行文件。"; exit 1; }
          
          # ----> 关键修改：明确将 Sing-Box 移动到 /usr/local/bin 并验证 <----
          echo "将 Sing-Box 移动到 /usr/local/bin..."
          sudo mv "$SING_BOX_BINARY" /usr/local/bin/sing-box || { echo "错误：移动 Sing-Box 文件失败。"; exit 1; }
          sudo chmod +x /usr/local/bin/sing-box # 确保权限
          
          # 重新验证 Sing-Box 安装，确保它在 /usr/local/bin/ 可执行
          if /usr/local/bin/sing-box version; then
            echo "Sing-Box 成功安装到 /usr/local/bin/！"
          else
            echo "错误：Sing-Box 未能成功安装到 /usr/local/bin/ 或无法执行。"
            exit 1
          fi

          # 清理下载文件
          rm -rf sing-box.tar.gz sing-box-*


      - name: Install Xray Core
        run: |
          echo "开始安装 Xray Core..."
          curl -L --retry 3 https://github.com/XTLS/Xray-install/raw/main/install-release.sh -o /tmp/install-xray.sh
          [ -s /tmp/install-xray.sh ] || { echo "错误：下载 Xray 安装脚本失败"; exit 1; }
          chmod +x /tmp/install-xray.sh
          sudo bash /tmp/install-xray.sh || { echo "错误：Xray 安装脚本执行失败。"; exit 1; }
          rm -f /tmp/install-xray.sh
          
          # ----> 关键修改：明确验证 Xray 是否在 /usr/local/bin/ 可执行 <----
          if /usr/local/bin/xray version; then
            echo "Xray Core 成功安装到 /usr/local/bin/！"
          else
            echo "错误：Xray Core 未能成功安装到 /usr/local/bin/ 或无法执行。"
            exit 1
          fi
          echo "Xray Core 安装完成并验证成功！"


      - name: Run speed test script
        run: |
          echo "正在运行速度测试脚本..."
          
          # ----> 移除大部分诊断命令，但保留关键的最终验证 <----
          echo "--- 最终验证 /usr/local/bin/sing-box ---"
          ls -l /usr/local/bin/sing-box
          /usr/local/bin/sing-box version
          echo "--- 最终验证 /usr/local/bin/xray ---"
          ls -l /usr/local/bin/xray
          /usr/local/bin/xray version
          echo "-------------------------------------"

          # 确保 /usr/local/bin 在 PATH 中 (虽然 Python 脚本中已指定完整路径，但仍保留以防万一)
          export PATH="/usr/local/bin:$PATH"
          
          chmod +x speed_test.py
          python3 speed_test.py
          echo "速度测试脚本运行完成。"

      - name: Commit and push results
        run: |
          echo "正在提交并推送结果..."
          git config --global user.name 'GitHub Action'
          git config --global user.email 'action@github.com'
          # 检查是否有文件发生变化，避免空提交
          git diff --quiet --exit-code data/sub.txt data/failed_nodes.txt node_connectivity_results.log unparsed_nodes.log || git add data/sub.txt data/failed_nodes.txt node_connectivity_results.log unparsed_nodes.log
          git commit -m "Update node test results $(date -u +'%Y-%m-%d %H:%M:%S')" || echo "没有需要提交的更改。"
          git push
        env:
          GITHUB_TOKEN: ${{ secrets.BOT }}
 
