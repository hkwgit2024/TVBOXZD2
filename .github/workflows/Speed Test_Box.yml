name: Node Connectivity Test

on:
  schedule:
    - cron: '0 0 * * *'  # Run daily at UTC 00:00
  workflow_dispatch:  # Allow manual trigger

jobs:
  test-nodes:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install system dependencies
        run: |
          sudo apt update
          sudo apt install -y dnsutils curl jq

      - name: Install Python dependencies
        run: |
          pip install requests pyyaml

      - name: Install Sing-Box
        run: |
          # Retry fetching version 3 times
          for i in {1..3}; do
            SING_BOX_VERSION=$(curl -s --retry 3 https://api.github.com/repos/SagerNet/sing-box/releases/latest | jq -r '.tag_name') && break
            echo "Retry $i: Failed to fetch Sing-Box version"
            sleep 5
          done
          [ -z "$SING_BOX_VERSION" ] && { echo "Error: Could not fetch Sing-Box version"; exit 1; }
          SING_BOX_URL="https://github.com/SagerNet/sing-box/releases/download/${SING_BOX_VERSION}/sing-box-${SING_BOX_VERSION#v}-linux-amd64.tar.gz"
          echo "Downloading Sing-Box from $SING_BOX_URL"
          curl -sL --retry 3 "$SING_BOX_URL" -o sing-box.tar.gz || { echo "Error: Failed to download Sing-Box"; exit 1; }
          # Verify gzip format
          file sing-box.tar.gz | grep -q "gzip compressed data" || { echo "Error: Downloaded file is not a valid gzip archive"; exit 1; }
          tar -xzf sing-box.tar.gz || { echo "Error: Failed to extract Sing-Box archive"; exit 1; }
          SING_BOX_BINARY=$(find . -type f -name sing-box)
          [ -z "$SING_BOX_BINARY" ] && { echo "Error: Sing-Box binary not found in archive"; exit 1; }
          sudo mv "$SING_BOX_BINARY" /usr/local/bin/sing-box
          sudo chmod +x /usr/local/bin/sing-box
          rm -rf sing-box.tar.gz sing-box-*
          sing-box version || { echo "Error: Sing-Box installation failed"; exit 1; }

      - name: Install Xray Core
        run: |
          curl -L --retry 3 https://github.com/XTLS/Xray-install/raw/main/install-release.sh -o /tmp/install-xray.sh
          [ -s /tmp/install-xray.sh ] || { echo "Error: Failed to download Xray install script"; exit 1; }
          chmod +x /tmp/install-xray.sh
          sudo bash /tmp/install-xray.sh
          rm -f /tmp/install-xray.sh
          xray version || { echo "Error: Xray installation failed"; exit 1; }

      - name: Run speed test script
        run: |
          chmod +x speed_test.py
          python3 speed_test.py

      - name: Commit and push results
        run: |
          git config --global user.name 'GitHub Action'
          git config --global user.email 'action@github.com'
          git add data/sub.txt data/failed_nodes.txt node_connectivity_results.log unparsed_nodes.log
          git commit -m "Update node test results $(date -u +'%Y-%m-%d %H:%M:%S')" || echo "No changes to commit"
          git push
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Use standard token name
