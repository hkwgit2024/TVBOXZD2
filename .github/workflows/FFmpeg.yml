name: IPTV Checker Workflow

on:
  push:
    branches:
      - main
  schedule:
    - cron: '0 0 * * *' # 每天 UTC 00:00 运行
  workflow_dispatch: # 允许手动触发

jobs:
  test:
    runs-on: ubuntu-24.04
    steps:
      # 检出代码
      # 检出 qjlxg/vt 仓库的代码，使用 GITHUB_TOKEN 进行认证
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          repository: qjlxg/vt
          fetch-depth: 0 # 将 fetch-depth 设置为 0，以获取完整的历史记录，方便 git pull
          token: ${{ secrets.GITHUB_TOKEN }}

      # 设置 Python 环境
      # 使用 Python 3.10，与日志中的环境一致
      - name: Set up Python 3.10
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
          check-latest: false

      # 缓存 FFmpeg 依赖
      # 缓存 apt 安装的 .deb 文件，排除 lock 和 partial 目录以避免权限问题
      - name: Cache FFmpeg
        uses: actions/cache@v4
        with:
          path: |
            /var/cache/apt/archives/*.deb
          key: Linux-ffmpeg-apt-v1-${{ hashFiles('**/apt-requirements.txt') }}
          restore-keys: |
            Linux-ffmpeg-apt-v1-
          enableCrossOsArchive: false
          fail-on-cache-miss: false

      # 安装 FFmpeg
      # 安装 FFmpeg 6.1.1，确保 ffprobe 可用
      - name: Install FFmpeg
        run: |
          echo "Installing FFmpeg..."
          sudo apt-get update
          sudo apt-get install -y ffmpeg
          echo "FFmpeg installation complete."
        env:
          FFMPEG_CACHE_DIR: /var/cache/apt/archives

      # 安装 Python 依赖
      # 安装 validators, tqdm, requests, coverage 模块
      - name: Install Python dependencies
        run: |
          echo "Installing Python dependencies..."
          pip install --user validators tqdm requests coverage
          echo "Python dependencies installation complete."
        env:
          pythonLocation: /opt/hostedtoolcache/Python/3.10.18/x64

      # 运行 IPTV 检查脚本
      # 执行 ff/main_script.py，并列出 ff/ 目录文件以便调试
      - name: Run IPTV Checker Script
        run: |
          echo "Running IPTV checker script..."
          python ff/main_script.py
          echo "Listing files in ff/ directory after script execution:"
          ls -la ff/
        env:
          pythonLocation: /opt/hostedtoolcache/Python/3.10.18/x64
          PKG_CONFIG_PATH: /opt/hostedtoolcache/Python/3.10.18/x64/lib/pkgconfig
          Python_ROOT_DIR: /opt/hostedtoolcache/Python/3.10.18/x64
          Python2_ROOT_DIR: /opt/hostedtoolcache/Python/3.10.18/x64
          Python3_ROOT_DIR: /opt/hostedtoolcache/Python/3.10.18/x64
          LD_LIBRARY_PATH: /opt/hostedtoolcache/Python/3.10.18/x64/lib

      # 上传生成的文件作为 artifact
      # 上传 ff/ 目录下的生成文件，保留 7 天
      - name: Upload generated files
        uses: actions/upload-artifact@v4
        with:
          name: generated-iptv-files
          path: |
            ff/ff.txt
            ff/failed_links.txt
            ff/iptv_checker.log
            ff/checkpoint.json
          retention-days: 7
          if-no-files-found: warn
          compression-level: 6
          overwrite: false

      # 自动提交生成的文件到仓库
      # 将生成的文件提交到 ff/ 目录，使用 [skip ci] 避免循环触发
      - name: Commit generated files
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          # 先添加并提交生成的文件
          git add ff/ff.txt ff/failed_links.txt ff/iptv_checker.log ff/checkpoint.json
          git commit -m "Update generated IPTV files [skip ci]" || echo "No changes to commit, skipping commit step."
          # 然后拉取远程的最新更改并合并，将新提交放在最上面
          git pull --rebase origin main
          # 最后推送更改
          git push
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        if: success() # 仅在前面步骤成功时执行
