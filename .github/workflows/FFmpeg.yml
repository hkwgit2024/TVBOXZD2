name: IPTV Checker Tests with FFmpeg

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    timeout-minutes: 60

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.10
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'

    - name: Define FFmpeg cache path
      id: ffmpeg_cache_path
      run: |
        echo "FFMPEG_CACHE_DIR=/var/cache/apt/archives" >> $GITHUB_OUTPUT
      shell: bash

    - name: Cache FFmpeg apt packages
      id: cache-ffmpeg
      uses: actions/cache@v4
      with:
        path: ${{ steps.ffmpeg_cache_path.outputs.FFMPEG_CACHE_DIR }}
        key: ${{ runner.os }}-ffmpeg-apt-v1-${{ hashFiles('**/Dockerfile', '**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-ffmpeg-apt-v1-

    - name: Install FFmpeg
      run: |
        echo "Installing FFmpeg..."
        sudo apt-get update
        sudo apt-get install -y ffmpeg
        echo "FFmpeg installation complete."
      shell: bash

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install coverage tqdm requests validators

    - name: Setup test files
      working-directory: ${{ github.workspace }}
      run: |
        mkdir -p ff
        # 删除下面两行，让脚本使用仓库中原有的 list.txt
        # echo "Test Channel,http://devstreaming-cdn.apple.com/videos/streaming/examples/bipbop_adv_example_hevc/master.m3u8" > list.txt
        # echo "CCTV1,https://cdn5.132.us.kg/live/cctv1/stream.m3u8" >> list.txt
        echo '{"ffmpeg_path": "ffmpeg", "timeout": 3, "read_duration": 2, "max_retries": 2, "max_workers": 300, "min_resolution_width": 1280, "min_bitrate": 500000, "max_response_time": 1.5, "quick_check_timeout": 1, "default_headers": {"User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.0.0 Safari/537.36", "Referer": "https://www.example.com"}, "exclude_domains": ["epg.pw", "ali-m-l.cztv.com"], "input_file": "list.txt", "output_file": "ff/ff.txt", "failed_links_file": "ff/failed_links.txt", "log_file": "ff/iptv_checker.log", "checkpoint_file": "ff/checkpoint.json"}' > ff/config.json
      shell: bash

    - name: Verify setup files
      run: |
        ls -la
        ls -la ff/
        cat ff/config.json
      shell: bash

    - name: Test sample links
      run: |
        curl -I http://devstreaming-cdn.apple.com/videos/streaming/examples/bipbop_adv_example_hevc/master.m3u8
        curl -I https://cdn5.132.us.kg/live/cctv1/stream.m3u8
      shell: bash

    - name: Run tests with coverage
      run: |
        python -m coverage run -m unittest ff/test_iptv_checker.py -v
        python -m coverage report
        python ff/main_script.py --verbose
      shell: /usr/bin/bash --noprofile --norc -e -o pipefail {0}
