import os
import logging
from zhconv import convert
from collections import defaultdict
import re # 导入正则表达式库

# 配置日志记录器
logging.basicConfig(level=logging.INFO, format='%(levelname)s: %(message)s')

# --- 常量定义 ---
INPUT_FILE = 'iptv_list.txt' # 输入文件名
OUTPUT_FILE = 'tv_list.txt' # 输出文件名
GENRE_DELIMITER = '#genre#' # 分类标题的分隔符
OTHER_CATEGORY_NAME = '其他' # 未分类频道的默认分类名称

# 定义分类关键词
# 整合了更多已知的地方频道和国际频道，力求更准确和全面
# 调整了部分类别名称和关键词，使其更明确
CATEGORIES = {
    '卫视综合': ['卫视', '东方卫视', '湖南卫视', '浙江卫视', '江苏卫视', '北京卫视', '上海卫视', '凤凰卫视', '星空卫视', '澳亚卫视'],
    '新闻财经': ['新闻', '财经', '时事', '资讯', '新唐人', '凤凰资讯', '无线新闻', '有线新闻', '彭博', '道琼斯', '华尔街'], # 包含财经，并添加香港无线、有线新闻
    '娱乐影视': ['娱乐', '炫动', '综艺', '剧场', '影视', '影院', '电影', '电视剧', '卡通', '动漫'], # 将卡通动漫合并到这里
    '体育竞技': ['体育', 'CCTV5', '高尔夫', 'F1', '足球', '篮球', '赛车', '冰雪', '劲爆体育', '风云足球'],
    '音乐艺术': ['音乐', '戏曲', '艺术', '梨园', '歌剧', '舞蹈'],
    '生活科教': ['生活', '科教', '探索', '纪实', '教育', '学习', '养生', '地理', '军事', '法治', '健康', '旅游'],
    'CCTV央视': ['CCTV', '中央', '中国教育', '中国气象'],
    
    # 地方频道 - 省级/直辖市/自治区 - 更明确卫视和综合台，增加更多关键词
    '广东频道': ['广东卫视', '广东', '珠江', 'TVS', '南方', '深圳卫视', '深圳', '广州卫视', '广州', '佛山', '东莞', '中山', '珠海', '汕头', '惠州', '湛江', '韶关', '潮州', '揭阳', '梅州', '茂名', '肇庆', '阳江', '清远', '江门', '云浮'],
    '北京频道': ['北京卫视', '北京', 'BTV', '京视'],
    '上海频道': ['上海卫视', '上海', '东方卫视', '东方', '上视'],
    '天津频道': ['天津卫视', '天津', '天视'],
    '重庆频道': ['重庆卫视', '重庆', '渝视'],
    '河北频道': ['河北卫视', '河北', '石家庄', '保定', '唐山', '廊坊', '邯郸', '秦皇岛', '承德', '张家口', '沧州', '衡水', '邢台'],
    '河南频道': ['河南卫视', '河南', '郑州', '洛阳', '开封', '平顶山', '安阳', '焦作', '新乡', '濮阳', '许昌', '漯河', '三门峡', '南阳', '商丘', '信阳', '周口', '驻马店', '济源'],
    '山西频道': ['山西卫视', '山西', '太原', '大同', '阳泉', '长治', '晋城', '朔州', '晋中', '运城', '忻州', '临汾', '吕梁'],
    '辽宁频道': ['辽宁卫视', '辽宁', '沈阳', '大连', '鞍山', '抚顺', '本溪', '丹东', '锦州', '营口', '阜新', '辽阳', '铁岭', '朝阳', '盘锦', '葫芦岛'],
    '吉林频道': ['吉林卫视', '吉林', '长春', '吉林市', '四平', '辽源', '通化', '白山', '松原', '白城', '延边'],
    '黑龙江频道': ['黑龙江卫视', '黑龙江', '哈尔滨', '齐齐哈尔', '鸡西', '鹤岗', '双鸭山', '大庆', '伊春', '佳木斯', '七台河', '牡丹江', '黑河', '绥化', '大兴安岭'],
    '江苏频道': ['江苏卫视', '江苏', '南京', '苏州', '无锡', '常州', '镇江', '南通', '泰州', '扬州', '盐城', '徐州', '淮安', '宿迁', '连云港'],
    '浙江频道': ['浙江卫视', '浙江', '杭州', '宁波', '温州', '绍兴', '湖州', '嘉兴', '金华', '衢州', '舟山', '台州', '丽水'],
    '安徽频道': ['安徽卫视', '安徽', '合肥', '芜湖', '蚌埠', '淮南', '马鞍山', '淮北', '铜陵', '安庆', '黄山', '滁州', '阜阳', '宿州', '巢湖', '六安', '亳州', '池州', '宣城'],
    '福建频道': ['福建卫视', '福建', '福州', '厦门', '泉州', '漳州', '莆田', '三明', '南平', '龙岩', '宁德'],
    '江西频道': ['江西卫视', '江西', '南昌', '景德镇', '萍乡', '九江', '新余', '鹰潭', '赣州', '吉安', '宜春', '抚州', '上饶'],
    '山东频道': ['山东卫视', '山东', '济南', '青岛', '淄博', '枣庄', '东营', '烟台', '潍坊', '济宁', '泰安', '威海', '日照', '莱芜', '临沂', '德州', '聊城', '滨州', '菏泽'],
    '湖北频道': ['湖北卫视', '湖北', '武汉', '黄石', '十堰', '宜昌', '襄阳', '鄂州', '荆门', '孝感', '荆州', '黄冈', '咸宁', '随州', '恩施', '仙桃', '潜江', '天门', '神农架'],
    '湖南频道': ['湖南卫视', '湖南', '长沙', '株洲', '湘潭', '衡阳', '邵阳', '岳阳', '常德', '张家界', '益阳', '郴州', '永州', '怀化', '娄底', '湘西'],
    '广西频道': ['广西卫视', '广西', '南宁', '柳州', '桂林', '梧州', '北海', '防城港', '钦州', '贵港', '玉林', '百色', '贺州', '河池', '来宾', '崇左'],
    '海南频道': ['海南卫视', '海南', '海口', '三亚'],
    '四川频道': ['四川卫视', '四川', '成都', '绵阳', '自贡', '攀枝花', '泸州', '德阳', '广元', '遂宁', '内江', '乐山', '南充', '眉山', '宜宾', '广安', '达州', '雅安', '巴中', '资阳', '阿坝', '甘孜', '凉山'],
    '贵州频道': ['贵州卫视', '贵州', '贵阳', '遵义', '六盘水', '安顺', '毕节', '铜仁', '黔西南', '黔东南', '黔南'],
    '云南频道': ['云南卫视', '云南', '昆明', '曲靖', '玉溪', '保山', '昭通', '丽江', '普洱', '临沧', '楚雄', '红河', '文山', '西双版纳', '大理', '德宏', '怒江', '迪庆'],
    '西藏频道': ['西藏卫视', '西藏', '拉萨', '昌都', '山南', '日喀则', '那曲', '阿里', '林芝'],
    '陕西频道': ['陕西卫视', '陕西', '西安', '铜川', '宝鸡', '咸阳', '渭南', '延安', '汉中', '榆林', '安康', '商洛'],
    '甘肃频道': ['甘肃卫视', '甘肃', '兰州', '嘉峪关', '金昌', '白银', '天水', '武威', '张掖', '平凉', '酒泉', '庆阳', '定西', '陇南', '临夏', '甘南'],
    '青海频道': ['青海卫视', '青海', '西宁', '海东', '海北', '黄南', '海南州', '果洛', '玉树', '海西'],
    '宁夏频道': ['宁夏卫视', '宁夏', '银川', '石嘴山', '吴忠', '固原', '中卫'],
    '新疆频道': ['新疆卫视', '新疆', '乌鲁木齐', '克拉玛依', '吐鲁番', '哈密', '昌吉', '博尔塔拉', '巴音郭楞', '阿克苏', '克孜勒苏', '喀什', '和田', '伊犁', '塔城', '阿勒泰', '石河子', '阿拉尔', '图木舒克', '五家渠', '北屯', '铁门关', '双河', '可克达拉', '昆玉', '胡杨河', '新星'],
    '内蒙古频道': ['内蒙古卫视', '内蒙古', '呼和浩特', '包头', '乌海', '赤峰', '通辽', '鄂尔多斯', '呼伦贝尔', '巴彦淖尔', '乌兰察布', '兴安盟', '锡林郭勒盟', '阿拉善盟'],
    
    # 港澳台频道 - 更全面
    '港澳台频道': ['香港', 'TVB', 'ATV', 'ViuTV', '开电视', 'RTHK', '凤凰中文', '凤凰卫视', '凤凰香港', '澳亚卫视', '台湾', '中天', 'TVBS', '华视', '台视', '民视', '东森', '公共电视', '八大', '年代', '三立', '非凡', '大爱', '壹电视', '国语', '普通话'], # 明确添加“凤凰中文”和“凤凰卫视”
    
    # 海外国际频道 - 更全面
    '海外国际频道': ['CNN', 'CNA', 'CNBC', 'BBC', 'VOA', 'NHK', 'KBS', 'Russia Today', 'RT', 'France 24', 'Deutsche Welle', 'DW', 'Al Jazeera', '半岛', '新加坡', '马来西亚', '泰国', '越南', '印度尼西亚', '美国', '加拿大', '英国', '法国', '德国', '日本', '韩国', '澳洲', '新西兰', '亚洲新闻台', '欧洲新闻', '美洲', '非洲', '中东', '环球电视', '国际频道'],
}

# 城市到省份/直辖市的映射 - 尽可能完整，并考虑县级市
PROVINCE_CITY_MAPPING = {
    # 广东 (以地级市为主，兼顾部分常见县级市/区)
    '深圳': '广东频道', '广州': '广东频道', '佛山': '广东频道', '东莞': '广东频道',
    '中山': '广东频道', '珠海': '广东频道', '汕头': '广东频道', '惠州': '广东频道',
    '湛江': '广东频道', '韶关': '广东频道', '潮州': '广东频道', '揭阳': '广东频道',
    '梅州': '广东频道', '茂名': '广东频道', '肇庆': '广东频道', '阳江': '广东频道',
    '清远': '广东频道', '江门': '广东频道', '云浮': '广东频道', '顺德': '广东频道',
    '南沙': '广东频道', '增城': '广东频道', '从化': '广东频道', '花都': '广东频道',
    # 河北
    '石家庄': '河北频道', '保定': '河北频道', '唐山': '河北频道', '廊坊': '河北频道',
    '邯郸': '河北频道', '秦皇岛': '河北频道', '承德': '河北频道', '张家口': '河北频道',
    '沧州': '河北频道', '衡水': '河北频道', '邢台': '河北频道', '定州': '河北频道',
    '辛集': '河北频道', '迁安': '河北频道',
    # 河南
    '郑州': '河南频道', '洛阳': '河南频道', '开封': '河南频道', '平顶山': '河南频道',
    '安阳': '河南频道', '焦作': '河南频道', '新乡': '河南频道', '濮阳': '河南频道',
    '许昌': '河南频道', '漯河': '河南频道', '三门峡': '河南频道', '南阳': '河南频道',
    '商丘': '河南频道', '信阳': '河南频道', '周口': '河南频道', '驻马店': '河南频道',
    '济源': '河南频道', '项城': '河南频道', '淅川': '河南频道', '新野': '河南频道',
    '新蔡': '河南频道', '新县': '河南频道', '邓州': '河南频道', '永城': '河南频道',
    '固始': '河南频道',
    # 山西
    '太原': '山西频道', '大同': '山西频道', '阳泉': '山西频道', '长治': '山西频道',
    '晋城': '山西频道', '朔州': '山西频道', '晋中': '山西频道', '运城': '山西频道',
    '忻州': '山西频道', '临汾': '山西频道', '吕梁': '山西频道',
    # 辽宁
    '沈阳': '辽宁频道', '大连': '辽宁频道', '鞍山': '辽宁频道', '抚顺': '辽宁频道',
    '本溪': '辽宁频道', '丹东': '辽宁频道', '锦州': '辽宁频道', '营口': '辽宁频道',
    '阜新': '辽宁频道', '辽阳': '辽宁频道', '铁岭': '辽宁频道', '朝阳': '辽宁频道',
    '盘锦': '辽宁频道', '葫芦岛': '辽宁频道',
    # 吉林
    '长春': '吉林频道', '吉林市': '吉林频道', '四平': '吉林频道', '辽源': '吉林频道',
    '通化': '吉林频道', '白山': '吉林频道', '松原': '吉林频道', '白城': '吉林频道',
    '延边': '吉林频道',
    # 黑龙江
    '哈尔滨': '黑龙江频道', '齐齐哈尔': '黑龙江频道', '鸡西': '黑龙江频道', '鹤岗': '黑龙江频道',
    '双鸭山': '黑龙江频道', '大庆': '黑龙江频道', '伊春': '黑龙江频道', '佳木斯': '黑龙江频道',
    '七台河': '黑龙江频道', '牡丹江': '黑龙江频道', '黑河': '黑龙江频道', '绥化': '黑龙江频道',
    '大兴安岭': '黑龙江频道', '嫩江': '黑龙江频道',
    # 江苏
    '南京': '江苏频道', '苏州': '江苏频道', '无锡': '江苏频道', '常州': '江苏频道',
    '镇江': '江苏频道', '南通': '江苏频道', '泰州': '江苏频道', '扬州': '江苏频道',
    '盐城': '江苏频道', '徐州': '江苏频道', '淮安': '江苏频道', '宿迁': '江苏频道',
    '连云港': '江苏频道', '新沂': '江苏频道', '昆山': '江苏频道', '江阴': '江苏频道',
    '张家港': '江苏频道',
    # 浙江
    '杭州': '浙江频道', '宁波': '浙江频道', '温州': '浙江频道', '绍兴': '浙江频道',
    '湖州': '浙江频道', '嘉兴': '浙江频道', '金华': '浙江频道', '衢州': '浙江频道',
    '舟山': '浙江频道', '台州': '浙江频道', '丽水': '浙江频道', '萧山': '浙江频道',
    '新昌': '浙江频道', '象山': '浙江频道', '义乌': '浙江频道', '慈溪': '浙江频道',
    '余姚': '浙江频道', '诸暨': '浙江频道',
    # 安徽
    '合肥': '安徽频道', '芜湖': '安徽频道', '蚌埠': '安徽频道', '淮南': '安徽频道',
    '马鞍山': '安徽频道', '淮北': '安徽频道', '铜陵': '安徽频道', '安庆': '安徽频道',
    '黄山': '安徽频道', '滁州': '安徽频道', '阜阳': '安徽频道', '宿州': '安徽频道',
    '巢湖': '安徽频道', '六安': '安徽频道', '亳州': '安徽频道', '池州': '安徽频道',
    '宣城': '安徽频道',
    # 福建
    '福州': '福建频道', '厦门': '福建频道', '泉州': '福建频道', '漳州': '福建频道',
    '莆田': '福建频道', '三明': '福建频道', '南平': '福建频道', '龙岩': '福建频道',
    '宁德': '福建频道',
    # 江西
    '南昌': '江西频道', '景德镇': '江西频道', '萍乡': '江西频道', '九江': '江西频道',
    '新余': '江西频道', '鹰潭': '江西频道', '赣州': '江西频道', '吉安': '江西频道',
    '宜春': '江西频道', '抚州': '江西频道', '上饶': '江西频道',
    # 山东
    '济南': '山东频道', '青岛': '山东频道', '淄博': '山东频道', '枣庄': '山东频道',
    '东营': '山东频道', '烟台': '山东频道', '潍坊': '山东频道', '济宁': '山东频道',
    '泰安': '山东频道', '威海': '山东频道', '日照': '山东频道', '莱芜': '山东频道',
    '临沂': '山东频道', '德州': '山东频道', '聊城': '山东频道', '滨州': '山东频道',
    '菏泽': '山东频道',
    # 湖北
    '武汉': '湖北频道', '黄石': '湖北频道', '十堰': '湖北频道', '宜昌': '湖北频道',
    '襄阳': '湖北频道', '鄂州': '湖北频道', '荆门': '湖北频道', '孝感': '湖北频道',
    '荆州': '湖北频道', '黄冈': '湖北频道', '咸宁': '湖北频道', '随州': '湖北频道',
    '恩施': '湖北频道', '仙桃': '湖北频道', '潜江': '湖北频道', '天门': '湖北频道',
    '神农架': '湖北频道',
    # 湖南
    '长沙': '湖南频道', '株洲': '湖南频道', '湘潭': '湖南频道', '衡阳': '湖南频道',
    '邵阳': '湖南频道', '岳阳': '湖南频道', '常德': '湖南频道', '张家界': '湖南频道',
    '益阳': '湖南频道', '郴州': '湖南频道', '永州': '湖南频道', '怀化': '湖南频道',
    '娄底': '湖南频道', '湘西': '湖南频道',
    # 广西
    '南宁': '广西频道', '柳州': '广西频道', '桂林': '广西频道', '梧州': '广西频道',
    '北海': '广西频道', '防城港': '广西频道', '钦州': '广西频道', '贵港': '广西频道',
    '玉林': '广西频道', '百色': '广西频道', '贺州': '广西频道', '河池': '广西频道',
    '来宾': '广西频道', '崇左': '广西频道',
    # 海南
    '海口': '海南频道', '三亚': '海南频道',
    # 四川
    '成都': '四川频道', '绵阳': '四川频道', '自贡': '四川频道', '攀枝花': '四川频道',
    '泸州': '四川频道', '德阳': '四川频道', '广元': '四川频道', '遂宁': '四川频道',
    '内江': '四川频道', '乐山': '四川频道', '南充': '四川频道', '眉山': '四川频道',
    '宜宾': '四川频道', '广安': '四川频道', '达州': '四川频道', '雅安': '四川频道',
    '巴中': '四川频道', '资阳': '四川频道', '阿坝': '四川频道', '甘孜': '四川频道',
    '凉山': '四川频道',
    # 贵州
    '贵阳': '贵州频道', '遵义': '贵州频道', '六盘水': '贵州频道', '安顺': '贵州频道',
    '毕节': '贵州频道', '铜仁': '贵州频道', '黔西南': '贵州频道', '黔东南': '贵州频道',
    '黔南': '贵州频道',
    # 云南
    '昆明': '云南频道', '曲靖': '云南频道', '玉溪': '云南频道', '保山': '云南频道',
    '昭通': '云南频道', '丽江': '云南频道', '普洱': '云南频道', '临沧': '云南频道',
    '楚雄': '云南频道', '红河': '云南频道', '文山': '云南频道', '西双版纳': '云南频道',
    '大理': '云南频道', '德宏': '云南频道', '怒江': '云南频道', '迪庆': '云南频道',
    # 西藏
    '拉萨': '西藏频道', '昌都': '西藏频道', '山南': '西藏频道', '日喀则': '西藏频道',
    '那曲': '西藏频道', '阿里': '西藏频道', '林芝': '西藏频道',
    # 陕西
    '西安': '陕西频道', '铜川': '陕西频道', '宝鸡': '陕西频道', '咸阳': '陕西频道',
    '渭南': '陕西频道', '延安': '陕西频道', '汉中': '陕西频道', '榆林': '陕西频道',
    '安康': '陕西频道', '商洛': '陕西频道',
    # 甘肃
    '兰州': '甘肃频道', '嘉峪关': '甘肃频道', '金昌': '甘肃频道', '白银': '甘肃频道',
    '天水': '甘肃频道', '武威': '甘肃频道', '张掖': '甘肃频道', '平凉': '甘肃频道',
    '酒泉': '甘肃频道', '庆阳': '甘肃频道', '定西': '甘肃频道', '陇南': '甘肃频道',
    '临夏': '甘肃频道', '甘南': '甘肃频道', '夏河': '甘肃频道',
    # 青海
    '西宁': '青海频道', '海东': '青海频道', '海北': '青海频道', '黄南': '青海频道',
    '海南州': '青海频道', '果洛': '青海频道', '玉树': '青海频道', '海西': '青海频道',
    '兴海': '青海频道',
    # 宁夏
    '银川': '宁夏频道', '石嘴山': '宁夏频道', '吴忠': '宁夏频道', '固原': '宁夏频道',
    '中卫': '宁夏频道',
    # 新疆
    '乌鲁木齐': '新疆频道', '克拉玛依': '新疆频道', '吐鲁番': '新疆频道', '哈密': '新疆频道',
    '昌吉': '新疆频道', '博尔塔拉': '新疆频道', '巴音郭楞': '新疆频道', '阿克苏': '新疆频道',
    '克孜勒苏': '新疆频道', '喀什': '新疆频道', '和田': '新疆频道', '伊犁': '新疆频道',
    '塔城': '新疆频道', '阿勒泰': '新疆频道', '石河子': '新疆频道', '阿拉尔': '新疆频道',
    '图木舒克': '新疆频道', '五家渠': '新疆频道', '北屯': '新疆频道', '铁门关': '新疆频道',
    '双河': '新疆频道', '可克达拉': '新疆频道', '昆玉': '新疆频道', '胡杨河': '新疆频道',
    '新星': '新疆频道',
    # 内蒙古
    '呼和浩特': '内蒙古频道', '包头': '内蒙古频道', '乌海': '内蒙古频道', '赤峰': '内蒙古频道',
    '通辽': '内蒙古频道', '鄂尔多斯': '内蒙古频道', '呼伦贝尔': '内蒙古频道', '巴彦淖尔': '内蒙古频道',
    '乌兰察布': '内蒙古频道', '兴安盟': '内蒙古频道', '锡林郭勒盟': '内蒙古频道', '阿拉善盟': '内蒙古频道',
    '兴隆': '内蒙古频道',

    # 海外主要城市/地区，用于更细致的国外频道归类（如果频道名中包含）
    '新加坡': '海外国际频道', '东京': '海外国际频道', '首尔': '海外国际频道', '纽约': '海外国际频道',
    '伦敦': '海外国际频道', '巴黎': '海外国际频道', '柏林': '海外国际频道', '多伦多': '海外国际频道',
    '莫斯科': '海外国际频道', '迪拜': '海外国际频道', '悉尼': '海外国际频道', '开罗': '海外国际频道',
    '圣保罗': '海外国际频道', '德里': '海外国际频道', '华盛顿': '海外国际频道', '渥太华': '海外国际频道',
}


# 预处理关键词，将所有关键词转换为小写，方便后续进行大小写不敏感的匹配
LOWERCASE_CATEGORIES = {
    cat: [kw.lower() for kw in keywords]
    for cat, keywords in CATEGORIES.items()
}
# 预处理城市映射，确保键和值都是小写以便匹配
# 关键：按城市名长度降序排序，确保优先匹配更具体的城市名（如“石家庄”优先于“庄”）
LOWERCASE_PROVINCE_CITY_MAPPING = {
    city.lower(): province_cat
    for city, province_cat in PROVINCE_CITY_MAPPING.items()
}


# --- 函数定义 ---

def parse_iptv_list(filepath: str) -> dict[str, list[str]]:
    """
    读取 IPTV 列表文件，解析频道名称和URL。
    对于同一个频道名称，会将所有对应的 URL 收集到一个列表中。
    将名称转换为简体中文，并进行标准化清洗。

    Args:
        filepath: 输入 IPTV 列表文件的路径。

    Returns:
        一个字典，键是唯一的频道名称（经过清洗和简繁转换），
        值是一个包含所有对应 URL 的列表。
    """
    channels = defaultdict(list)

    try:
        with open(filepath, 'r', encoding='utf-8') as f:
            for line_num, line in enumerate(f, 1):
                line = line.strip()
                if not line or GENRE_DELIMITER in line:
                    continue

                try:
                    name_raw, url = line.split(',', 1)
                    # 1. 简繁体转换：统一为简体中文
                    name_clean = convert(name_raw, 'zh-cn').strip()
                    name_lower = name_clean.lower() # 提前转换为小写，方便后续判断

                    # 2. 特殊频道名称统一化处理
                    # 凤凰频道统一处理：将“凤凰”或“凤凰卫视”统一为“凤凰中文”
                    if "凤凰" in name_clean:
                        if "中文" not in name_clean and "资讯" not in name_clean and "香港" not in name_clean:
                            name_clean = "凤凰中文" # 默认统一为凤凰中文
                        elif "卫视" in name_clean and "中文" not in name_clean:
                            name_clean = name_clean.replace("卫视", "中文").strip() # 凤凰卫视 -> 凤凰中文

                    # 3. 移除常见的后缀或冗余信息
                    # 优先级：先移除括号内容，再移除通用后缀
                    if '(' in name_clean and ')' in name_clean:
                        name_clean = re.sub(r'\(.*?\)', '', name_clean).strip()
                    
                    # 移除数字后缀 (e.g., CCTV1_HD -> CCTV1, 卫视1台 -> 卫视)
                    # 先尝试移除 _数字/画质后缀
                    name_clean = re.sub(r'(_[0-9]+)|(_HD)|(_SD)|(_超清)|(_高清)|(_标清)|(_TEST)|(_测试)', '', name_clean, flags=re.IGNORECASE).strip()
                    # 再尝试移除数字后跟台/套
                    name_clean = re.sub(r'([0-9]+)(台|套)$', '', name_clean).strip()
                    # 再尝试移除中文数字后跟台/套
                    name_clean = re.sub(r'(一|二|三|四|五|六|七|八|九|十|零)(台|套)$', '', name_clean).strip()

                    # 移除通用词后缀 (从长到短，避免"新闻综合"先被"新闻"移除)
                    suffixes_to_remove = [
                        '频道', '综合', '新闻综合', '新闻', '生活', '影视剧', '影视', '剧场', '电影', '电视剧', '卡通', '动漫', '少儿',
                        '体育', '音乐', '戏曲', '艺术', '梨园', '科教', '探索', '纪实', '教育', '养生', '军事', '法治', '健康', '旅游',
                        '国际', '港澳台', '海外', '亚洲', '欧洲', '美洲', '非洲', '中东',
                        '卫视', '中央', '央视', '电视台', '电视', 'TV' # 放在最后，避免误删
                    ]
                    
                    # 使用正则表达式进行更灵活的匹配和移除
                    for suffix in sorted(suffixes_to_remove, key=len, reverse=True):
                        # 确保只移除作为单词边界或结尾的后缀
                        # 例如，"内蒙古卫视" -> "内蒙古"，但"卫视中文台"不会被移除"卫视"
                        pattern = r'(?<![a-zA-Z0-9])' + re.escape(suffix) + r'$' # 匹配结尾且前面不是字母数字
                        name_clean = re.sub(pattern, '', name_clean, flags=re.IGNORECASE).strip()
                        # 如果是包含在中间的，也尝试移除，但要小心
                        # name_clean = re.sub(r'\b' + re.escape(suffix) + r'\b', '', name_clean, flags=re.IGNORECASE).strip()

                    # 再次去除可能由移除后缀导致的空白
                    name_clean = name_clean.strip()

                    # 4. 针对地方频道名称进行标准化处理
                    # 如果频道名仅仅是省份或城市名，尝试使其更具体化，例如"内蒙古" -> "内蒙古卫视"
                    # 这需要与 CATEGORIES 中的关键词对应
                    # 只有当清理后的名称与某个省份/城市名称完全一致时才进行补充
                    found_province_or_city_match = False
                    for p_cat, p_keywords in LOWERCASE_CATEGORIES.items():
                        # 找到包含当前name_clean的类别关键词
                        if name_lower in p_keywords and \
                           p_cat.endswith('频道') and \
                           len(p_keywords) > 1: # 确保这个类别有更具体的关键词
                            
                            # 尝试补充为卫视或综合（这需要根据 CATEGORIES 中的定义来调整）
                            if f"{name_lower}卫视" in [kw.lower() for kw in CATEGORIES.get(p_cat, [])]:
                                name_clean = f"{name_clean}卫视"
                            elif f"{name_lower}综合" in [kw.lower() for kw in CATEGORIES.get(p_cat, [])]:
                                name_clean = f"{name_clean}综合"
                            found_province_or_city_match = True
                            break
                    
                    # 针对内蒙古的特定处理（例子，如果原始数据只有“内蒙古”）
                    if name_lower == '内蒙古' and '内蒙古卫视' in CATEGORIES['内蒙古频道']:
                        name_clean = '内蒙古卫视' # 假设默认是卫视

                    if not name_clean:
                        logging.warning(f"Line {line_num}: Skipped - Empty channel name for URL '{url}' (original: '{name_raw}')")
                        continue

                    # 将 URL 添加到对应频道名称的列表中
                    channels[name_clean].append(url)

                except ValueError:
                    logging.warning(f"Line {line_num}: Skipped - Malformed line (expected 'name,url'): '{line}'")
                except Exception as e:
                    logging.error(f"Line {line_num}: Error processing line '{line}': {e}")

    except FileNotFoundError:
        logging.error(f"错误: 输入文件 '{filepath}' 未找到。请确保 '{filepath}' 存在于脚本相同目录下。")
        return defaultdict(list)
    except Exception as e:
        logging.error(f"读取 '{filepath}' 时发生意外错误: {e}")
        return defaultdict(list)

    return dict(channels)


def classify_channels(channels_dict: dict[str, list[str]]) -> dict[str, list[str]]:
    """
    根据预定义的类别对频道进行分类。
    每个分类下的列表包含 "频道名,URL" 格式的字符串。
    优化：增加根据城市归类到省份/直辖市的逻辑。

    Args:
        channels_dict: 包含频道名称和对应 URL 列表的字典。

    Returns:
        一个字典，键是类别名称，值是属于该类别的 "名称,URL" 字符串列表。
        包含一个 '其他' (Other) 类别用于未分类的频道。
    """
    # 初始化所有类别，确保 CATEGORIES 和 PROVINCE_CITY_MAPPING 中涉及的所有类别都有
    all_defined_categories = set(CATEGORIES.keys())
    for province_cat in PROVINCE_CITY_MAPPING.values():
        all_defined_categories.add(province_cat)

    classified_channels = {cat: [] for cat in all_defined_categories}
    other_channels = []

    for name, urls in channels_dict.items():
        categorized = False
        name_lower = name.lower()

        # 1. 尝试直接匹配预定义的 CATEGORIES (优先级更高)
        # 遍历 CATEGORIES 的键（类别名称）
        for cat_name, keywords_lower in LOWERCASE_CATEGORIES.items():
            # 优化匹配顺序：优先匹配更长的关键词，以避免“新闻”匹配掉“新闻财经”
            sorted_keywords = sorted(keywords_lower, key=len, reverse=True)
            for keyword in sorted_keywords:
                if keyword in name_lower:
                    for url in urls:
                        classified_channels[cat_name].append(f"{name},{url}")
                    categorized = True
                    break # 频道已分类，跳出当前关键词循环
            if categorized:
                break # 频道已分类，跳出当前类别循环，处理下一个频道
        if categorized:
            continue

        # 2. 如果未通过直接匹配分类，则尝试根据城市映射到省份/直辖市 (优先级次之)
        # 遍历 PROVINCE_CITY_MAPPING 的键（城市名称），确保优先匹配更长的城市名
        sorted_cities = sorted(LOWERCASE_PROVINCE_CITY_MAPPING.keys(), key=len, reverse=True)
        for city_lower in sorted_cities:
            if city_lower in name_lower:
                province_cat = LOWERCASE_PROVINCE_CITY_MAPPING[city_lower]
                # 确保目标省份类别存在于 classified_channels 中
                if province_cat not in classified_channels:
                    classified_channels[province_cat] = []
                for url in urls:
                    classified_channels[province_cat].append(f"{name},{url}")
                categorized = True
                break
        if categorized:
            continue

        # 3. 如果以上都未分类，则归入 '其他'
        if not categorized:
            for url in urls:
                other_channels.append(f"{name},{url}")

    # 将'其他'类别添加到结果中（如果存在）
    if other_channels:
        classified_channels[OTHER_CATEGORY_NAME] = other_channels

    return classified_channels

def write_classified_list(output_filepath: str, classified_data: dict[str, list[str]]):
    """
    将分类后的频道写入输出文件，并带上类别标题。
    改进写入顺序：先写入明确定义的 CATEGORIES 顺序，然后是 PROVINCE_CITY_MAPPING 中新增的省份/地区，最后是其他。

    Args:
        output_filepath: 输出文件的路径。
        classified_data: 已分类的频道数据字典。
    """
    try:
        with open(output_filepath, 'w', encoding='utf-8') as f:
            written_categories = set() # 记录已写入的类别，避免重复

            # 1. 按照 CATEGORIES 中定义的顺序写入主类别
            for cat_name_order in CATEGORIES.keys():
                if cat_name_order in classified_data and classified_data[cat_name_order]:
                    f.write(f"{cat_name_order},{GENRE_DELIMITER}\n")
                    for channel_str in sorted(classified_data[cat_name_order]): # 按频道名排序
                        f.write(f"{channel_str}\n")
                    written_categories.add(cat_name_order)

            # 2. 写入通过城市映射新增的省份/直辖市类别，且这些类别未在 CATEGORIES 主列表中被写入的
            # 提取所有 PROVINCE_CITY_MAPPING 目标类别，并保持它们独特的写入顺序
            additional_province_cats = sorted(list(set(PROVINCE_CITY_MAPPING.values()) - written_categories))

            for province_cat in additional_province_cats:
                if province_cat in classified_data and classified_data[province_cat]:
                    f.write(f"{province_cat},{GENRE_DELIMITER}\n")
                    for channel_str in sorted(classified_data[province_cat]): # 按频道名排序
                        f.write(f"{channel_str}\n")
                    written_categories.add(province_cat) # 标记为已写入

            # 3. 最后写入 '其他' 类别（如果存在）
            if OTHER_CATEGORY_NAME in classified_data and classified_data[OTHER_CATEGORY_NAME]:
                f.write(f"{OTHER_CATEGORY_NAME},{GENRE_DELIMITER}\n")
                for channel_str in sorted(classified_data[OTHER_CATEGORY_NAME]): # 按频道名排序
                    f.write(f"{channel_str}\n")

        logging.info(f"分类完成，结果已保存到 '{output_filepath}'")
    except Exception as e:
        logging.error(f"写入输出文件 '{output_filepath}' 时发生错误: {e}")

# --- 主程序执行入口 ---
if __name__ == "__main__":
    logging.info(f"开始从 '{INPUT_FILE}' 分类 IPTV 列表...")

    # 1. 解析输入文件
    parsed_channels = parse_iptv_list(INPUT_FILE)
    if not parsed_channels:
        logging.warning("未找到频道或解析过程中发生错误。程序退出。")
    else:
        # 2. 分类频道
        classified_results = classify_channels(parsed_channels)

        # 3. 将分类结果写入输出文件
        write_classified_list(OUTPUT_FILE, classified_results)
